#!/bin/bash
#
# MySQL Tools.
#
# For suggestion, bug reports, please contact Pierre-Yves Landur√© <pierre-yves.landure@biapy.fr>
#
VERSION="1.0.1"

SCRIPT_NAME="$(command basename ${0})"

# Print this script help.
function usage {
  command echo "MySQL Tools v${VERSION}
This tool ease MySQL server administration from command line.

Usage :

  ${SCRIPT_NAME} [ --db-prefix='database_prefix' ]
      [ --user-prefix='user_prefix' ] [ --host='user_host' ]
      [ --user='mysql_user' ] [ --password='mysql_password' ]
      [ --create database_name |
        --drop database_name |
        --empty database_name |
        --adduser=user_name [ --grant='ALL' ] [ database_name ]
        --deluser=user_name
      ]

  Available options are :
    * --db-prefix | --dp : The database name prefix.
    * --user-prefix | --up : The username prefix.
    * --host | -h : The created user host (multiple occurence allowed).
    * --user | -u : The user used to run the SQL queries (default to root).
    * --password | -p : The password of the user running the queries.

  Available actions are :
    * --help | -h : Display this message.
    * --create | -c : Create a database and its user.
    * --empty | -e : Drop all tables of a database.
    * --drop | -d : Destroy the database and its user.
    * --adduser | -a : Create a unprivilegied user, or a user for a database.
    * --grant | -g : In conjunction with --adduser, set the create user
        privileges (default to ALL) (multiple occurence allowed).
        see: https://dev.mysql.com/doc/refman/5.0/fr/grant.html
    * --deluser : Delete a mysql user.
"
  exit 1
} # usage


# Get the absolute path for a file or directory.
#
# @param string $path A relative path.
#
# @return ${REALPATH} A absolute path.
REALPATH=""
function realpath {
  command test ${#} -ne 1 && exit 1
  REALPATH="$(/bin/readlink -f "${1}")"
} # realpath



# Get the absolute path for a file or directory and check the file existance.
# If the file does not exists, display an error message and exit the script.
#
# @param string $path A relative path.
#
# @return ${REALPATH} A absolute path or an empty string if file don't exists.
REALPATH=""
function realpath_check {
  command test ${#} -ne 1 && exit 1

  realpath "${1}"

  if [ -n "${REALPATH}" -a ! -e "${REALPATH}" ]; then
    REALPATH=""
  fi

  if [ -z "${REALPATH}" ]; then
    echo "Error : File '${1}' does not exists." >&2
    exit 1
  fi
} # realpath_check



# Check if a binary is present
#
# @param string $binary The binary to check.
# @param string $package The package the binary come from.
#
# @return Exit with error if the binary is missing.
function check_binary {
  command test ${#} -ne 2 && exit 1

  # Test the binary presence.
  if [ -z "$(which "${1}")" ]; then
    echo "Error : '${1}' is missing. Please install package '${2}'."
    exit 1
  fi
} # check_binary



# Check if a patckage file is present
#
# @param string $file The file to check.
# @param string $package The package the binary come from.
#
# @return Exit with error if the file is missing.
function check_package_file {
  command test ${#} -ne 2 && exit 1

  # Test the file presence.
  if [ ! -e "${1}" ]; then
    echo "Error : '${1}' is missing. Please install package '${2}'." >&2
    exit 1
  fi
} # check_package_file



# Check if MySQL connection is working
#
# @param string $mysql_host The MySQL host.
# @param string $mysql_user The MySQL user.
# @param string $mysql_password The MySQL password.
# @param string $mysql_db The MySQL DB.
#
# @return Exit with error if connection to MySQL fail.
function check_mysql {
  command test ${#} -ne 4 && exit 1

  # Test the MySQL connection.
  if ! command mysql --execute="SELECT 1" \
            --host="${1}" --user="${2}" --password="${3}" \
            "${4}" 2>&1 > /dev/null; then
    echo "Error : Unable to connect to MySQL. Please provide valid MySQL connection parameters."
    exit 1
  fi
} # check_mysql



# Download a file from the given URL.
#
# @param string $url The URL of the file to download.
#
# @return ${DOWNLOAD_FILE} The path to the downloaded file.
DOWNLOAD_FILE=""
function download_file {
  command test ${#} -ne 1 && exit 1

  # Download a file.
  DOWNLOAD_FILE="$(command mktemp)"
  command wget --quiet "${1}" \
      --output-document="${DOWNLOAD_FILE}"

  if [ ! -s "${DOWNLOAD_FILE}" ]; then
    command rm "${DOWNLOAD_FILE}"
    echo "Error : Unable to download file from '${1}'." >&2
    exit 1
  fi
} # download_file



# Download and uncompress a tgz file from the given URL.
#
# @param string $url The URL of the file to download.
#
# @return ${DOWNLOAD_TGZ} The path to the extracted content.
DOWNLOAD_TGZ=""
function download_tgz {
  command test ${#} -ne 1 && exit 1

  download_file "${1}"

  # Untar the downloaded file and place it at its final location.
  DOWNLOAD_TGZ="$(command mktemp -d)"
  command tar --directory "${DOWNLOAD_TGZ}" -xzf "${DOWNLOAD_FILE}"
  command rm "${DOWNLOAD_FILE}"

  if [ $(command ls -1 --all "${DOWNLOAD_TGZ}" | command wc --lines) -eq 0 ]; then
    echo "Error : unable to untar file downloaded from '${1}'." >&2
    exit 1
  fi
} # download_tgz



# Read the eth0 IP.
#
# @return A IP address.
function eth0_ip {
  command ifconfig eth0 \
            | command grep "inet adr" \
            | command sed -e 's/.*inet adr:\([^ ]*\).*/\1/'
} # eth0_ip



# Call MySQL.
#
# @param string $mysql_user A MySQL user.
# @param string $mysql_password A MySQL user password.
# @param mixed $arg1, $arg2 arguments passed to mysql command.
#
# @return MySQL command result.
function mysql_call {
  command test ${#} -lt 3 && exit 1

  MYSQL_CALL_USER="${1}"
  MYSQL_CALL_PASSWORD="${2}"
  shift $[2]

  if [ "${MYSQL_CALL_PASSWORD}" = "false" ]; then
    command mysql --user="${MYSQL_CALL_USER}" "${@}"
  elif [ "${MYSQL_CALL_PASSWORD}" = "true" ]; then
    command mysql --user="${MYSQL_CALL_USER}" --password "${@}"
  else
    command mysql --user="${MYSQL_CALL_USER}" --password="${MYSQL_CALL_PASSWORD}" "${@}"
  fi

  return "${?}"
} # mysql_call


#######################################################################################
#######################################################################################
#######################################################################################
# Include from /usr/share/doc/bash-doc/examples/functions/getoptx.bash of package bash-doc.
#######################################################################################
#######################################################################################
#######################################################################################
function getoptex()
{
  let $# || return 1
  local optlist="${1#;}"
  let OPTIND || OPTIND=1
  [ $OPTIND -lt $# ] || return 1
  shift $OPTIND
  if [ "$1" != "-" ] && [ "$1" != "${1#-}" ]
  then OPTIND=$[OPTIND+1]; if [ "$1" != "--" ]
  then
    local o
    o="-${1#-$OPTOFS}"
    for opt in ${optlist#;}
    do
      OPTOPT="${opt%[;.:]}"
      unset OPTARG
      local opttype="${opt##*[^;:.]}"
      [ -z "$opttype" ] && opttype=";"
      if [ ${#OPTOPT} -gt 1 ]
      then # long-named option
        case $o in
          "--$OPTOPT")
            if [ "$opttype" != ":" ]; then return 0; fi
            OPTARG="$2"
            if [ -z "$OPTARG" ];
            then # error: must have an agrument
              let OPTERR && echo "$0: error: $OPTOPT must have an argument" >&2
              OPTARG="$OPTOPT";
              OPTOPT="?"
              return 1;
            fi
            OPTIND=$[OPTIND+1] # skip option's argument
            return 0
          ;;
          "--$OPTOPT="*)
            if [ "$opttype" = ";" ];
            then  # error: must not have arguments
              let OPTERR && echo "$0: error: $OPTOPT must not have arguments" >&2
              OPTARG="$OPTOPT"
              OPTOPT="?"
              return 1
            fi
            OPTARG=${o#"--$OPTOPT="}
            return 0
          ;;
        esac
      else # short-named option
        case "$o" in
          "-$OPTOPT")
            unset OPTOFS
            [ "$opttype" != ":" ] && return 0
            OPTARG="$2"
            if [ -z "$OPTARG" ]
            then
              echo "$0: error: -$OPTOPT must have an argument" >&2
              OPTARG="$OPTOPT"
              OPTOPT="?"
              return 1
            fi
            OPTIND=$[OPTIND+1] # skip option's argument
            return 0
          ;;
          "-$OPTOPT"*)
            if [ $opttype = ";" ]
            then # an option with no argument is in a chain of options
              OPTOFS="$OPTOFS?" # move to the next option in the chain
              OPTIND=$[OPTIND-1] # the chain still has other options
              return 0
            else
              unset OPTOFS
              OPTARG="${o#-$OPTOPT}"
              return 0
            fi
          ;;
        esac
      fi
    done
    echo "Error : invalid option : '${o}'." >&2
    usage
    exit 1
  fi; fi
  OPTOPT="?"
  unset OPTARG
  return 1
}
function optlistex
{
  local l="$1"
  local m # mask
  local r # to store result
  while [ ${#m} -lt $[${#l}-1] ]; do m="$m?"; done # create a "???..." mask
  while [ -n "$l" ]
  do
    r="${r:+"$r "}${l%$m}" # append the first character of $l to $r
    l="${l#?}" # cut the first charecter from $l
    m="${m#?}"  # cut one "?" sign from m
    if [ -n "${l%%[^:.;]*}" ]
    then # a special character (";", ".", or ":") was found
      r="$r${l%$m}" # append it to $r
      l="${l#?}" # cut the special character from l
      m="${m#?}"  # cut one more "?" sign
    fi
  done
  echo $r
}
function getopt()
{
  local optlist=`optlistex "$1"`
  shift
  getoptex "$optlist" "$@"
  return $?
}
#######################################################################################
#######################################################################################
#######################################################################################



# Check for binaries presence
check_binary "basename" "coreutils"
check_binary "dirname" "coreutils"
check_binary "mktemp" "mktemp"
check_binary "sed" "sed"
check_binary "mysql" "mysql-client"
check_binary "apg" "apg"
check_binary "wget" "wget"



BASE_DB_NAME=""
ACTION=""
DB_PREFIX=""
USER_PREFIX=""
BASE_USER_NAME=""
USER_HOSTS="localhost"
MYSQL_USER="root"
MYSQL_PASSWORD="false"
PRIVILEGES=""

MANDATORY_DB="true"
MANDATORY_PASSWORD="false"

# Parse options using getoptex from /usr/share/doc/bash-doc/examples/functions/getoptx.bash
while getoptex "help h create c db-prefix: dp: user-prefix: up: drop d empty e adduser: a: grant: g: deluser: host: h: user: u: password. p." "${@}"; do
  # Options debuging.
  # echo "Option <$OPTOPT> ${OPTARG:+has an arg <$OPTARG>}"

  case "${OPTOPT}" in
    create | c )
      ACTION="create"
      ;;

    drop | d )
      MANDATORY_PASSWORD="true"
      ACTION="drop"
      ;;

    empty | e )
      MANDATORY_PASSWORD="true"
      ACTION="empty"
      ;;

    db-prefix | dp )
      DB_PREFIX="${OPTARG}"
      ;;

    user-prefix | up )
      USER_PREFIX="${OPTARG}"
      ;;

    adduser | a )
      BASE_USER_NAME="${OPTARG}"
      ACTION="adduser"
      MANDATORY_DB="false"
      ;;

    grant | g )
      if [ -n "${OPTARG}" ]; then
        PRIVILEGES="${PRIVILEGES} ${OPTARG}"
      fi
      ;;

    deluser )
      BASE_USER_NAME="${OPTARG}"
      ACTION="deluser"
      MANDATORY_DB="false"
      ;;

    host | h )
      if [ -n "${OPTARG}" ]; then
        USER_HOSTS="${USER_HOSTS} ${OPTARG}"
      fi
      ;;

    user | u)
      MYSQL_USER="${OPTARG}"
      ;;

    password | p)
      MYSQL_PASSWORD="${OPTARG}"

      if [ -z "${MYSQL_PASSWORD}" ]; then
        MYSQL_PASSWORD="true"
      fi
      ;;

    help | h )
      usage
      exit 0
      ;;
  esac
done

shift $[OPTIND-1]

BASE_DB_NAME="${1}"

command test -z "${BASE_DB_NAME}" -a "${MANDATORY_DB}" = "true" && usage

# Retrocompatibility.
case "${BASE_DB_NAME}" in
  create-db )
    # Check if valid number of arguments given.
    command test ${#} -lt 2 && usage

    MYSQL_DB="${2}"
    ALLOWED_HOSTS="${3}"
    ROOT_PASSWORD="${4}"

    ${0} --host="${ALLOWED_HOSTS}" --password="${ROOT_PASSWORD}" --create "${MYSQL_DB}"
    exit 0
    ;;

  create-domain-db )
    # Check if valid number of arguments given.
    command test ${#} -lt 2 && usage

    DOMAIN="${2}"
    ALLOWED_HOSTS="${3}"
    ROOT_PASSWORD="${4}"

    MYSQL_DB=$(echo "${DOMAIN//[^_0-9A-Za-z]/_}" | command tr '[a-z]' '[A-Z]')

    ${0} --host="${ALLOWED_HOSTS}" --password="${ROOT_PASSWORD}" --create "${MYSQL_DB}"
    exit 0
    ;;

  create-user )
    # Check if valid number of arguments given.
    command test ${#} -lt 2 && usage

    MYSQL_USER="${2}"
    MYSQL_PASSWORD="${3}"
    ALLOWED_HOSTS="localhost ${4}"
    ROOT_PASSWORD="${5}"

    ;;

  clear-db )
    # Check if valid number of arguments given.
    command test ${#} -lt 2 && usage

    MYSQL_DB="${2}"
    MYSQL_USER="${3}"
    MYSQL_PASSWORD="${4}"

    ${0} --user="${MYSQL_USER}" --password="${MYSQL_PASSWORD}" --empty "${MYSQL_DB}"
    exit 0
    ;;

  drop-db )
    # Check if valid number of arguments given.
    command test ${#} -lt 2 && usage

    MYSQL_DB="${2}"
    ROOT_PASSWORD="${3}"

    ${0} --password="${ROOT_PASSWORD}" --drop "${MYSQL_DB}"
    exit 0
    ;;

  drop-domain-db )
    # Check if valid number of arguments given.
    command test ${#} -lt 2 && usage

    DOMAIN="${2}"
    ROOT_PASSWORD="${3}"

    MYSQL_DB=$(echo "${DOMAIN//[^_0-9A-Za-z]/_}" | command tr '[a-z]' '[A-Z]')

    ${0} --password="${ROOT_PASSWORD}" --drop "${MYSQL_DB}"
    exit 0
    ;;
esac



# Compute final db name.
DB_NAME=""
if [ -n "${DB_PREFIX}" ]; then
  if [ -z "${USER_PREFIX}" ]; then
    USER_PREFIX="$(command echo "${DB_PREFIX}" | command cut --bytes=1)"
  fi
  USER_PREFIX="${USER_PREFIX//[^_0-9A-Za-z]/-}_"

  DB_NAME="${DB_PREFIX//[^_0-9A-Za-z]/-}_"
fi
DB_NAME="${DB_NAME}${BASE_DB_NAME//[^_0-9A-Za-z]/-}"

# Compute final db user name.
if [ -n "${BASE_USER_NAME}" ]; then
  DB_USER="$(command echo "${USER_PREFIX//[^_0-9A-Za-z]/-}${BASE_USER_NAME//[^_0-9A-Za-z]/-}" \
  | command tr '[A-Z]' '[a-z]' \
  | command cut --characters=-16)"
else
  DB_USER="$(command echo "${USER_PREFIX//[^_0-9A-Za-z]/-}${BASE_DB_NAME//[^_0-9A-Za-z]/-}" \
  | command tr '[A-Z]' '[a-z]' \
  | command cut --characters=-16)"
fi
DB_PASSWORD="$(command apg -q -a  0 -n 1 -M NCL)"

# set default grant privileges.
if [ -z "${PRIVILEGES}" ]; then
  PRIVILEGES="ALL"
fi

# Ask for password if none given.
if [ "${MANDATORY_PASSWORD}" = "true" \
    -a "${MYSQL_PASSWORD}" = "true" ]; then

  echo -n "Enter password: "
  command read -s MYSQL_PASSWORD
fi



case "${ACTION}" in
  create )
    SQL_QUERY="CREATE DATABASE \`${DB_NAME}\`
                    DEFAULT CHARACTER SET utf8
                    DEFAULT COLLATE utf8_unicode_ci;"
    for ALLOWED_HOST in ${USER_HOSTS}; do
      SQL_QUERY="${SQL_QUERY}
        GRANT ALL PRIVILEGES ON \`${DB_NAME}\`.*
            TO \`${DB_USER}\`@\`${ALLOWED_HOST}\`
            IDENTIFIED BY '${DB_PASSWORD}';"
    done

    if mysql_call "${MYSQL_USER}" "${MYSQL_PASSWORD}" \
          --execute="${SQL_QUERY}"; then
      command echo "# Database access parameters are :
# Database name
MYSQL_DB=${DB_NAME}
# Database user
MYSQL_USER=${DB_USER}
# Database user password
MYSQL_PASSWORD=${DB_PASSWORD}"
      exit 0
    fi

    echo "Error: unable to create database '${DB_NAME}'"
    exit 1
    ;;



  drop )
    SQL_QUERY="SELECT \`user\`, \`host\`
                    FROM \`mysql\`.\`user\`
                    WHERE \`user\` = '${DB_USER}';"

    # Dropping users.
    SQL_QUERY="$(mysql_call "${MYSQL_USER}" "${MYSQL_PASSWORD}" --batch --skip-column-names \
          --skip-line-numbers --skip-pager \
          --execute="${SQL_QUERY}" \
        | command sed -e "s/\(.*\)\t\(.*\)/DROP USER '\1'@'\2';/")"
    if mysql_call "${MYSQL_USER}" "${MYSQL_PASSWORD}" \
        --execute="${SQL_QUERY}"; then
      # Dropping database.
      SQL_QUERY="DROP DATABASE \`${DB_NAME}\`;"

      if mysql_call "${MYSQL_USER}" "${MYSQL_PASSWORD}" \
            --execute="${SQL_QUERY}"; then
        echo "Database '${DB_NAME}' dropped successfully."
        exit 0
      fi

      echo "Error: Unable to drop database '${DB_NAME}'."
      exit 1
    fi

    echo "Error: unable to delete user '${DB_USER}'."
    exit 1
    ;;



  empty )
    SQL_QUERY="$(mysql_call "${MYSQL_USER}" "${MYSQL_PASSWORD}" \
        --batch --skip-column-names \
        --skip-line-numbers --skip-pager \
        "${DB_NAME}" --execute="SHOW TABLES;" \
        | command sed -e 's/^.*$/DROP TABLE `&`;/')"

    if [ -n "${SQL_QUERY}" ]; then
      SQL_QUERY="SET FOREIGN_KEY_CHECKS = 0;
${SQL_QUERY}
SET FOREIGN_KEY_CHECKS = 1;"

      if mysql_call "${MYSQL_USER}" "${MYSQL_PASSWORD}" \
            "${DB_NAME}" --execute="${SQL_QUERY}"; then
        echo "Tables dropped successfully from database '${DB_NAME}'."
        exit 0
      fi

      echo "Error: unable to drop tables from database '${DB_NAME}'."
      exit 1
    fi

    echo "Error: unable to fetch database '${DB_NAME}' table list."
    exit 1
    ;;



  adduser )
    SQL_QUERY=""
    for ALLOWED_HOST in ${USER_HOSTS}; do
      if [ -z "${BASE_DB_NAME}" ]; then
        SQL_QUERY="${SQL_QUERY}
            CREATE USER \`${DB_USER}\`@\`${ALLOWED_HOST}\`
                IDENTIFIED BY '${DB_PASSWORD}';"
      else
        SQL_QUERY="${SQL_QUERY}
            GRANT ${PRIVILEGES} ON \`${DB_NAME}\`.*
                TO \`${DB_USER}\`@\`${ALLOWED_HOST}\`
                IDENTIFIED BY '${DB_PASSWORD}';"
      fi
    done

    if mysql_call "${MYSQL_USER}" "${MYSQL_PASSWORD}" \
        --execute="${SQL_QUERY}"; then
      if [ -z "${BASE_DB_NAME}" ]; then
        command echo "# MySQL User access parameters are :
# MySQL user
MYSQL_USER=${DB_USER}
# MySQL user password
MYSQL_PASSWORD=${DB_PASSWORD}"
      else
        command echo "# Database access parameters are :
# Database name
MYSQL_DB=${DB_NAME}
# Database user
MYSQL_USER=${DB_USER}
# Database user password
MYSQL_PASSWORD=${DB_PASSWORD}"
      fi

      exit 0
    fi

    if [ -z "${BASE_DB_NAME}" ]; then
      echo "Error: unable to create user '${DB_USER}'."
    else
      echo "Error: unable to create user '${DB_USER}' for database '${DB_NAME}'."
    fi
    exit 1
    ;;



  deluser )
    SQL_QUERY="SELECT \`user\`, \`host\`
                    FROM \`mysql\`.\`user\`
                    WHERE \`user\` = '${DB_USER}';"

    # Dropping users.
    SQL_QUERY="$(mysql_call "${MYSQL_USER}" "${MYSQL_PASSWORD}" --batch --skip-column-names \
          --skip-line-numbers --skip-pager \
          --execute="${SQL_QUERY}" \
        | command sed -e "s/\(.*\)\t\(.*\)/DROP USER '\1'@'\2';/")"
    if mysql_call "${MYSQL_USER}" "${MYSQL_PASSWORD}" \
        --execute="${SQL_QUERY}"; then

      echo "User '${DB_USER}' successfully deleted."
      exit 1
    fi

    echo "Error: unable to delete user '${DB_USER}'."
    exit 1
    ;;



  * )
    echo "Error : '${1}' is not a valid action."
    usage
    ;;
esac

exit 0
