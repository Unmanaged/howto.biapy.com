#!/bin/bash
#
# MySQL Tools.
#
# For suggestion and bug reports, please contact
# Pierre-Yves Landur√© <pierre-yves dot landure at biapy dot fr>
#
VERSION="1.1.5"

SCRIPT_NAME="$(command basename ${0})"

# Print this script help.
function usage {
  command echo "MySQL Tools v${VERSION}
This tool ease MySQL server administration from command line.

Usage :

  ${SCRIPT_NAME} [ --db-prefix='database_prefix' ]
      [ --user-prefix='user_prefix' ] [ --host='user_host' ] [ --auto-hosts ]
      [ --user='mysql_user' ] [ --password='mysql_password' ]
      [ --mysql='mysql' ] [ --server='localhost' ] [ --with-ssh[=root] ]
      [ --create='database_name' |
        --drop='database_name' |
        --empty='database_name' |
        --adduser='user_name' [ --grant='ALL' ] [ --database='database_name' ]
        --deluser='user_name'
      ]

  Available options are :
    * --mysql | -m    : Specify the mysql client command to use
                        (default to mysql).
    * --server | -s   : Specify the mysql server to connect to
                        (default to localhost).
    * --user | -u     : The user used to run the SQL queries (default to root).
    * --password | -p : The password of the user running the queries.
    * --with-ssh | -r : If server is remote and mysql connection failed,
                        try to run mysql-tools on the remote server via ssh.
                        Optional argument is SSH user to use (default to root).
    * --host | -h     : The created user host (multiple occurence allowed).
    * --auto-hosts     : Automaticaly compute created user hosts.
    * --db-prefix | --dp    : The database name prefix.
    * --user-prefix | --up  : The username prefix.
    * --database | --db     : The database name.

  Available actions are :
    * --help          : Display this message.
    * --create | -c   : Create a database and its user.
    * --empty | -e    : Drop all tables of a database.
    * --drop | -d     : Destroy the database and its user.
    * --adduser | -a  : Create a unprivilegied user, or a user for a database.
    * --grant | -g    : In conjunction with --adduser, set the create user
                        privileges (default: ALL) (multiple occurence allowed).
                        see: https://dev.mysql.com/doc/refman/5.0/fr/grant.html
    * --deluser       : Delete a mysql user.
"

  test -n "${1}" && exit ${1}
} # usage



# Get the absolute path for a file or directory.
#
# @param string $path A relative path.
#
# @return ${REALPATH} A absolute path.
REALPATH=""
function realpath {
  command test ${#} -ne 1 && exit 1
  REALPATH="$(command readlink -f "${1}")"
} # realpath



# Get the absolute path for a file or directory and check the file existance.
# If the file does not exists, display an error message and exit the script.
#
# @param string $path A relative path.
#
# @return ${REALPATH} A absolute path or an empty string if file don't exists.
REALPATH=""
function realpath_check {
  command test ${#} -ne 1 && exit 1

  realpath "${1}"

  if [ -n "${REALPATH}" -a ! -e "${REALPATH}" ]; then
    REALPATH=""
  fi

  if [ -z "${REALPATH}" ]; then
    echo "Error : File '${1}' does not exists." >&2
    exit 1
  fi
} # realpath_check



# Read the interface IP.
#
# @param string $interface The network interface (for example: eth0).
#
# @return A IP address.
INTERFACE_IP=""
function interface_ip {
  command test ${#} -ne 1 && exit 1

  INTERFACE="${1}"

  INTERFACE_IP="$(command ifconfig "${INTERFACE}" \
            | command grep "inet " \
            | command sed -e 's/.*inet [^:]*:\([^ ]*\).*/\1/')"
} # interface_ip



# Check if a binary is present
#
# @param string $binary The binary to check.
# @param string $package The package the binary come from.
#
# @return Exit with error if the binary is missing.
function check_binary {
  command test ${#} -ne 2 && exit 1

  # Test the binary presence.
  if [ -z "$(command which "${1}")" ]; then
    echo "Error : '${1}' is missing. Please install package '${2}'." >&2
    exit 1
  fi
} # check_binary



# Call MySQL.
#
# @param string $mysql_host The MySQL server host.
# @param string $mysql_user A MySQL user.
# @param string $mysql_password A MySQL user password.
# @param mixed $arg1, $arg2 arguments passed to mysql command.
#
# @return MySQL command result.
function mysql_call {
  command test ${#} -lt 5 && exit 1

  MYSQL_CALL_CLIENT="${1}"
  MYSQL_CALL_HOST="${2}"
  MYSQL_CALL_USER="${3}"
  MYSQL_CALL_PASSWORD="${4}"
  shift $[4]

  if [ "${MYSQL_CALL_PASSWORD}" = "false" ]; then
    "${MYSQL_CALL_CLIENT}" --host="${MYSQL_CALL_HOST}" \
        --user="${MYSQL_CALL_USER}" "${@}"
  elif [ "${MYSQL_CALL_PASSWORD}" = "true" ]; then
    "${MYSQL_CALL_CLIENT}" --host="${MYSQL_CALL_HOST}" \
        --user="${MYSQL_CALL_USER}" --password "${@}"
  else
    "${MYSQL_CALL_CLIENT}" --host="${MYSQL_CALL_HOST}" \
        --user="${MYSQL_CALL_USER}" --password="${MYSQL_CALL_PASSWORD}" "${@}"
  fi

  return "${?}"
} # mysql_call



# Check if MySQL connection is working
#
# @param string $mysql_host The MySQL host.
# @param string $mysql_user The MySQL user.
# @param string $mysql_password The MySQL password.
# @param string $mysql_db The MySQL database (optional).
# @param string $no_exit "true" to use return values instead of exit (optional).
#
# @return Exit with error if connection to MySQL fail.
function check_mysql {
  command test ${#} -lt 4 && exit 1

  MYSQL_CHECK_CLIENT="${1}"
  MYSQL_CHECK_HOST="${2}"
  MYSQL_CHECK_USER="${3}"
  MYSQL_CHECK_PASSWORD="${4}"
  MYSQL_CHECK_DB="${5}"
  NO_EXIT="${6}"

  # Test the MySQL connection.
  if [ -n "${MYSQL_CHECK_DB}" ]; then
    if ! mysql_call "${MYSQL_CHECK_CLIENT}" "${MYSQL_CHECK_HOST}" \
          "${MYSQL_CHECK_USER}" "${MYSQL_CHECK_PASSWORD}" \
          --execute="SELECT 1" "${MYSQL_CHECK_DB}" 1>"/dev/null"; then
      if [ "${NO_EXIT}" = "true" ]; then
        return 1
      fi
      echo "Error : Unable to connect to MySQL. Please provide valid MySQL connection parameters." >&2
      exit 1
    fi
  else
    if ! mysql_call "${MYSQL_CHECK_CLIENT}" "${MYSQL_CHECK_HOST}" \
          "${MYSQL_CHECK_USER}" "${MYSQL_CHECK_PASSWORD}" \
          --execute="SHOW STATUS" 1>"/dev/null"; then
      if [ "${NO_EXIT}" = "true" ]; then
        return 2
      fi
      echo "Error : Unable to connect to MySQL. Please provide valid MySQL connection parameters." >&2
      exit 1
    fi
  fi

  return 0
} # check_mysql



#######################################################################################
#######################################################################################
#######################################################################################
# Include from /usr/share/doc/bash-doc/examples/functions/getoptx.bash of package bash-doc.
#######################################################################################
#######################################################################################
#######################################################################################
function getoptex()
{
  let $# || return 1
  local optlist="${1#;}"
  let OPTIND || OPTIND=1
  [ $OPTIND -lt $# ] || return 1
  shift $OPTIND
  if [ "$1" != "-" ] && [ "$1" != "${1#-}" ]
  then OPTIND=$[OPTIND+1]; if [ "$1" != "--" ]
  then
    local o
    o="-${1#-$OPTOFS}"
    for opt in ${optlist#;}
    do
      OPTOPT="${opt%[;.:]}"
      unset OPTARG
      local opttype="${opt##*[^;:.]}"
      [ -z "$opttype" ] && opttype=";"
      if [ ${#OPTOPT} -gt 1 ]
      then # long-named option
        case $o in
          "--$OPTOPT")
            if [ "$opttype" != ":" ]; then return 0; fi
            OPTARG="$2"
            if [ -z "$OPTARG" ];
            then # error: must have an agrument
              let OPTERR && echo "$0: error: $OPTOPT must have an argument" >&2
              OPTARG="$OPTOPT";
              OPTOPT="?"
              return 1;
            fi
            OPTIND=$[OPTIND+1] # skip option's argument
            return 0
          ;;
          "--$OPTOPT="*)
            if [ "$opttype" = ";" ];
            then  # error: must not have arguments
              let OPTERR && echo "$0: error: $OPTOPT must not have arguments" >&2
              OPTARG="$OPTOPT"
              OPTOPT="?"
              return 1
            fi
            OPTARG=${o#"--$OPTOPT="}
            return 0
          ;;
        esac
      else # short-named option
        case "$o" in
          "-$OPTOPT")
            unset OPTOFS
            [ "$opttype" != ":" ] && return 0
            OPTARG="$2"
            if [ -z "$OPTARG" ]
            then
              echo "$0: error: -$OPTOPT must have an argument" >&2
              OPTARG="$OPTOPT"
              OPTOPT="?"
              return 1
            fi
            OPTIND=$[OPTIND+1] # skip option's argument
            return 0
          ;;
          "-$OPTOPT"*)
            if [ $opttype = ";" ]
            then # an option with no argument is in a chain of options
              OPTOFS="$OPTOFS?" # move to the next option in the chain
              OPTIND=$[OPTIND-1] # the chain still has other options
              return 0
            else
              unset OPTOFS
              OPTARG="${o#-$OPTOPT}"
              return 0
            fi
          ;;
        esac
      fi
    done
    echo "Error : invalid option : '${o}'." >&2
    usage
    exit 1
  fi; fi
  OPTOPT="?"
  unset OPTARG
  return 1
}
function optlistex
{
  local l="$1"
  local m # mask
  local r # to store result
  while [ ${#m} -lt $[${#l}-1] ]; do m="$m?"; done # create a "???..." mask
  while [ -n "$l" ]
  do
    r="${r:+"$r "}${l%$m}" # append the first character of $l to $r
    l="${l#?}" # cut the first charecter from $l
    m="${m#?}"  # cut one "?" sign from m
    if [ -n "${l%%[^:.;]*}" ]
    then # a special character (";", ".", or ":") was found
      r="$r${l%$m}" # append it to $r
      l="${l#?}" # cut the special character from l
      m="${m#?}"  # cut one more "?" sign
    fi
  done
  echo $r
}
function getopt()
{
  local optlist=`optlistex "$1"`
  shift
  getoptex "$optlist" "$@"
  return $?
}
#######################################################################################
#######################################################################################
#######################################################################################



# Check for binaries presence
check_binary "basename" "coreutils"
check_binary "dirname" "coreutils"
check_binary "mktemp" "mktemp"
check_binary "sed" "sed"
check_binary "apg" "apg"
check_binary "ssh" "openssh-client"


# Application defaults
MYSQL_CLIENT="mysql"
MYSQL_HOST="localhost"
WITH_SSH="false"
WITH_SSH_USER="root"

BASE_DB_NAME=""
ACTION=""
BASE_DB_PREFIX=""
BASE_USER_PREFIX=""
DB_PREFIX=""
USER_PREFIX=""
BASE_USER_NAME=""
AUTO_HOSTS="false"
USER_HOSTS="localhost"
MYSQL_USER="false"
MYSQL_PASSWORD="false"
PRIVILEGES=""

MANDATORY_DB="true"
MANDATORY_PASSWORD="false"

# Parse options using getoptex from /usr/share/doc/bash-doc/examples/functions/getoptx.bash
while getoptex "help create: c: db-prefix: dp: user-prefix: up: drop: d: empty: e: adduser: a: grant: g: deluser: host: h: user: u: password. p. mysql: m: server: s: with-ssh. r. auto-hosts" "${@}"; do
  # Options debuging.
  # echo "Option <$OPTOPT> ${OPTARG:+has an arg <$OPTARG>}"

  case "${OPTOPT}" in
    create | c )
      ACTION="create"

      if [ -n "${OPTARG}" ]; then
        BASE_DB_NAME="${OPTARG}"
      fi
      ;;

    drop | d )
      MANDATORY_PASSWORD="true"
      ACTION="drop"

      if [ -n "${OPTARG}" ]; then
        BASE_DB_NAME="${OPTARG}"
      fi
      ;;

    empty | e )
      MANDATORY_PASSWORD="true"
      ACTION="empty"

      if [ -n "${OPTARG}" ]; then
        BASE_DB_NAME="${OPTARG}"
      fi
      ;;

    db-prefix | dp )
      BASE_DB_PREFIX="${OPTARG}"
      ;;

    database | db )
      if [ -n "${OPTARG}" ]; then
        case "${ACTION}" in
          "create" | "drop" | "empty" )
            # ignore database option for these actions.
            if [ -z "${BASE_DB_NAME}" ]; then
              BASE_DB_NAME="${OPTARG}"
            fi
            ;;
          * )
            BASE_DB_NAME="${OPTARG}"
            ;;
        esac
      fi
      ;;

    user-prefix | up )
      BASE_USER_PREFIX="${OPTARG}"
      ;;

    adduser | a )
      BASE_USER_NAME="${OPTARG}"
      ACTION="adduser"
      MANDATORY_DB="false"
      ;;

    grant | g )
      if [ -n "${OPTARG}" ]; then
        PRIVILEGES="${PRIVILEGES} ${OPTARG}"
      fi
      ;;

    deluser )
      BASE_USER_NAME="${OPTARG}"
      ACTION="deluser"
      MANDATORY_DB="false"
      ;;

    host | h )
      if [ -n "${OPTARG}" ]; then
        USER_HOSTS="${USER_HOSTS} ${OPTARG}"
      fi
      ;;

    auto-hosts )
      AUTO_HOSTS="true"
      ;;

    server | s )
      if [ -n "${OPTARG}" ]; then
        MYSQL_HOST="${OPTARG}"
      fi
      ;;

    mysql | m )
      if [ -n "${OPTARG}" ]; then
        MYSQL_CLIENT="${OPTARG}"
      fi
      ;;

    with-ssh | r )
      WITH_SSH="true"
      if [ -n "${OPTARG}" ]; then
        WITH_SSH_USER="${OPTARG}"
      fi
      ;;

    user | u)
      MYSQL_USER="${OPTARG}"
      ;;

    password | p)
      MYSQL_PASSWORD="${OPTARG}"

      if [ -z "${MYSQL_PASSWORD}" ]; then
        MYSQL_PASSWORD="true"
      fi
      ;;

    help | * )
      usage
      exit 0
      ;;
  esac
done

shift $[OPTIND-1]

if [ -z "${BASE_DB_NAME}" -a "${MANDATORY_DB}" = "true" ]; then
  echo "Error: Database name is missing." >&2
  usage 1
fi



# Check MYSQL_CLIENT existance.
if [[ "${MYSQL_CLIENT}" =~ "/" ]]; then
  # MYSQL_CLIENT is a path.
  realpath_check "${MYSQL_CLIENT}"
  MYSQL_CLIENT="${REALPATH}"
else
  # MYSQL_CLIENT is a command.
  MYSQL_CLIENT_PATH="$(command which "${MYSQL_CLIENT}")"
  if [ -z "${MYSQL_CLIENT_PATH}" ]; then
    echo "Error: can not find '${MYSQL_CLIENT}'." >&2
    exit 1
  fi
  MYSQL_CLIENT="${MYSQL_CLIENT_PATH}"
fi



# prevent overwriting the commandline args with the ones in .my.cnf,
# and check that .my.cnf exists
if [ -f "${HOME}/.my.cnf" ]; then

  if [ "${MYSQL_HOST}" = "localhost" \
      -a -n "$(command grep --max-count=1 \
          -e "^host=" "${HOME}/.my.cnf")" ]; then
    MYSQL_HOST="$(command grep --max-count=1 -e "^host=" "${HOME}/.my.cnf" \
                | command cut --delimiter="=" --fields=2-)"
  fi

  if [ "${MYSQL_USER}" = "false" \
      -a -n "$(command grep --max-count=1 \
          -e "^user=" "${HOME}/.my.cnf")" ]; then
    MYSQL_USER="$(command grep --max-count=1 -e "^user=" "${HOME}/.my.cnf" \
                | command cut --delimiter="=" --fields=2-)"

    if [ -n "$(command grep --max-count=1 \
          -e "^pass\(word\)\{0,1\}=" "${HOME}/.my.cnf")" ]; then
      MYSQL_PASSWORD="$(command grep --max-count=1 \
                    -e "^pass\(word\)\{0,1\}=" "${HOME}/.my.cnf" \
                | command cut --delimiter="=" --fields=2-)"
    fi
  fi
fi

if [ "${MYSQL_USER}" = "false" ]; then
  MYSQL_USER="root"
fi



# Retrocompatibility.
case "${BASE_DB_NAME}" in
  create-db )
    # Check if valid number of arguments given.
    command test ${#} -lt 2 && usage 1

    MYSQL_DB="${2}"
    ALLOWED_HOSTS="${3}"
    ROOT_PASSWORD="${4}"

    ${0} --host="${ALLOWED_HOSTS}" --password="${ROOT_PASSWORD}" --create "${MYSQL_DB}"
    exit 0
    ;;

  create-domain-db )
    # Check if valid number of arguments given.
    command test ${#} -lt 2 && usage 1

    DOMAIN="${2}"
    ALLOWED_HOSTS="${3}"
    ROOT_PASSWORD="${4}"

    MYSQL_DB=$(echo "${DOMAIN//[^_0-9A-Za-z]/_}" | command tr '[a-z]' '[A-Z]')

    ${0} --host="${ALLOWED_HOSTS}" --password="${ROOT_PASSWORD}" --create "${MYSQL_DB}"
    exit 0
    ;;

  create-user )
    # Check if valid number of arguments given.
    command test ${#} -lt 2 && usage 1

    USER_NAME="${2}"
    USER_PASSWORD="${3}"
    ALLOWED_HOSTS="localhost ${4}"
    ROOT_PASSWORD="${5}"

    ${0} --password="${ROOT_PASSWORD}" --host="${ALLOWED_HOSTS}" --adduser "${USER_NAME}"
    ;;

  clear-db )
    # Check if valid number of arguments given.
    command test ${#} -lt 2 && usage 1

    MYSQL_DB="${2}"
    MYSQL_USER="${3}"
    MYSQL_PASSWORD="${4}"

    ${0} --user="${MYSQL_USER}" --password="${MYSQL_PASSWORD}" --empty "${MYSQL_DB}"
    exit 0
    ;;

  drop-db )
    # Check if valid number of arguments given.
    command test ${#} -lt 2 && usage 1

    MYSQL_DB="${2}"
    ROOT_PASSWORD="${3}"

    ${0} --password="${ROOT_PASSWORD}" --drop "${MYSQL_DB}"
    exit 0
    ;;

  drop-domain-db )
    # Check if valid number of arguments given.
    command test ${#} -lt 2 && usage 1

    DOMAIN="${2}"
    ROOT_PASSWORD="${3}"

    MYSQL_DB=$(echo "${DOMAIN//[^_0-9A-Za-z]/_}" | command tr '[a-z]' '[A-Z]')

    ${0} --password="${ROOT_PASSWORD}" --drop "${MYSQL_DB}"
    exit 0
    ;;
esac



# Compute final db name.
DB_NAME=""
if [ -n "${BASE_DB_PREFIX}" ]; then
  if [ -z "${BASE_USER_PREFIX}" ]; then
    BASE_USER_PREFIX="$(command echo "${BASE_DB_PREFIX}" | command cut --bytes=1)"
  fi

  DB_PREFIX="${BASE_DB_PREFIX//[^_0-9A-Za-z]/-}_"
fi
if [ -n "${BASE_USER_PREFIX}" ]; then
  USER_PREFIX="${BASE_USER_PREFIX//[^_0-9A-Za-z]/-}_"
fi

DB_NAME="${DB_PREFIX}${BASE_DB_NAME//[^_0-9A-Za-z]/-}"

# Compute final db user name.
if [ -n "${BASE_USER_NAME}" ]; then
  DB_USER="$(command echo "${USER_PREFIX//[^_0-9A-Za-z]/-}${BASE_USER_NAME//[^_0-9A-Za-z]/-}" \
  | command tr '[A-Z]' '[a-z]' \
  | command cut --characters=-16)"
else
  DB_USER="$(command echo "${USER_PREFIX//[^_0-9A-Za-z]/-}${BASE_DB_NAME//[^_0-9A-Za-z]/-}" \
  | command tr '[A-Z]' '[a-z]' \
  | command cut --characters=-16)"
fi
DB_PASSWORD="$(command apg -q -a  0 -n 1 -M NCL)"

# set default grant privileges.
if [ -z "${PRIVILEGES}" ]; then
  PRIVILEGES="ALL"
fi

# Ask for password if none given.
if [ "${MANDATORY_PASSWORD}" = "true" \
    -a "${MYSQL_PASSWORD}" = "true" ]; then

  command read -p "Enter password: " -s MYSQL_PASSWORD
fi



# Compute user hosts for remote access.
if [ "${AUTO_HOSTS}" = "true" \
    -a "${MYSQL_HOST}" != "localhost" \
    -a "${MYSQL_HOST}" != "127.0.0.1" ]; then
  USER_HOSTS="${USER_HOSTS} $(command hostname) $(command hostname --fqdn)"
  interface_ip "eth0"
  if [ -n "${INTERFACE_IP}" ]; then
    USER_HOSTS="${USER_HOSTS} ${INTERFACE_IP}"
  fi
fi



# Check MySQL connection
if [ "${WITH_SSH}" = "true" \
    -a "${MYSQL_HOST}" != "localhost" \
    -a "${MYSQL_HOST}" != "127.0.0.1" ]; then
  # We use SSH access to remote server if mysql access failed.
  if ! check_mysql "${MYSQL_CLIENT}" "${MYSQL_HOST}" \
                "${MYSQL_USER}" "${MYSQL_PASSWORD}" "" "true"; then
    if [ "${MYSQL_PASSWORD}" = "true" ]; then
      command read -p "Enter password: " -s MYSQL_PASSWORD
    fi

    # Building remote mysql-tools arguments list.
    ACTION_ARGUMENT=""
    case "${ACTION}" in
      adduser | deluser )
        ACTION_ARGUMENT="--${ACTION}='${BASE_USER_NAME}'"
        ;;
      create | drop | empty )
        ACTION_ARGUMENT="--${ACTION}='${BASE_DB_NAME}'"
        ;;
      * )
        if [ -n "${ACTION}" ]; then
          ACTION_ARGUMENT="--${ACTION}"
        fi
        ;;
    esac

    ARGUMENTS=" --mysql='${MYSQL_CLIENT}' --server='localhost' \\
--user='${MYSQL_USER}' --password='${MYSQL_PASSWORD}' --host='${USER_HOSTS}' \\
--db-prefix='${BASE_DB_PREFIX}' --user-prefix='${BASE_USER_PREFIX}' \\
--grant='${PRIVILEGES}' --database='${BASE_DB_NAME}' ${ACTION_ARGUMENT}"

    # Running mysql-tools on remote server.
    echo "
Failed to connect to remove MySQL server using ${MYSQL_CLIENT} client.
Establishing SSH connection to '${WITH_SSH_USER}@${MYSQL_HOST}'..." >&2
    if command ssh "${WITH_SSH_USER}"@"${MYSQL_HOST}" \
        "command mysql-tools ${ARGUMENTS}"; then
      exit 0
    else
      exit 1
    fi
  fi
else
  check_mysql "${MYSQL_CLIENT}" "${MYSQL_HOST}" \
              "${MYSQL_USER}" "${MYSQL_PASSWORD}"
fi



case "${ACTION}" in
  create )
    SQL_QUERY="CREATE DATABASE \`${DB_NAME}\`
                    DEFAULT CHARACTER SET utf8
                    DEFAULT COLLATE utf8_unicode_ci;"
    for ALLOWED_HOST in ${USER_HOSTS}; do
      SQL_QUERY="${SQL_QUERY}
        GRANT ALL PRIVILEGES ON \`${DB_NAME}\`.*
            TO \`${DB_USER}\`@\`${ALLOWED_HOST}\`
            IDENTIFIED BY '${DB_PASSWORD}';"
    done

    if mysql_call "${MYSQL_CLIENT}" "${MYSQL_HOST}" \
          "${MYSQL_USER}" "${MYSQL_PASSWORD}" \
          --execute="${SQL_QUERY}"; then
      command echo "# Database access parameters are :
# Database name
MYSQL_DB=${DB_NAME}
# Database user
MYSQL_USER=${DB_USER}
# Database user password
MYSQL_PASSWORD=${DB_PASSWORD}"
      exit 0
    fi

    echo "Error: unable to create database '${DB_NAME}'" >&2
    exit 1
    ;;



  drop )
    SQL_QUERY="SELECT \`user\`, \`host\`
                    FROM \`mysql\`.\`user\`
                    WHERE \`user\` = '${DB_USER}';"

    # Dropping users.
    SQL_QUERY="$(mysql_call "${MYSQL_CLIENT}" "${MYSQL_HOST}" \
          "${MYSQL_USER}" "${MYSQL_PASSWORD}" \
          --batch --skip-column-names \
          --skip-line-numbers --skip-pager \
          --execute="${SQL_QUERY}" \
        | command sed -e "s/\(.*\)\t\(.*\)/DROP USER '\1'@'\2';/")"
    if mysql_call "${MYSQL_CLIENT}" "${MYSQL_HOST}" \
        "${MYSQL_USER}" "${MYSQL_PASSWORD}" \
        --execute="${SQL_QUERY}"; then
      # Dropping database.
      SQL_QUERY="DROP DATABASE \`${DB_NAME}\`;"

      if mysql_call "${MYSQL_CLIENT}" "${MYSQL_HOST}" \
            "${MYSQL_USER}" "${MYSQL_PASSWORD}" \
            --execute="${SQL_QUERY}"; then
        echo "Database '${DB_NAME}' dropped successfully."
        exit 0
      fi

      echo "Error: Unable to drop database '${DB_NAME}'." >&2
      exit 1
    fi

    echo "Error: unable to delete user '${DB_USER}'." >&2
    exit 1
    ;;



  empty )
    SQL_QUERY="$(mysql_call "${MYSQL_CLIENT}" "${MYSQL_HOST}" \
        "${MYSQL_USER}" "${MYSQL_PASSWORD}" \
        --batch --skip-column-names \
        --skip-line-numbers --skip-pager \
        "${DB_NAME}" --execute="SHOW TABLES;" \
        | command sed -e 's/^.*$/DROP TABLE `&`;/')"

    if [ -n "${SQL_QUERY}" ]; then
      SQL_QUERY="SET FOREIGN_KEY_CHECKS = 0;
${SQL_QUERY}
SET FOREIGN_KEY_CHECKS = 1;"

      if mysql_call "${MYSQL_CLIENT}" "${MYSQL_HOST}" \
            "${MYSQL_USER}" "${MYSQL_PASSWORD}" \
            "${DB_NAME}" --execute="${SQL_QUERY}"; then
        echo "Tables dropped successfully from database '${DB_NAME}'."
        exit 0
      fi

      echo "Error: unable to drop tables from database '${DB_NAME}'." >&2
      exit 1
    fi

    echo "Error: unable to fetch database '${DB_NAME}' table list." >&2
    exit 1
    ;;



  adduser )
    SQL_QUERY=""
    for ALLOWED_HOST in ${USER_HOSTS}; do
      if [ -z "${BASE_DB_NAME}" ]; then
        SQL_QUERY="${SQL_QUERY}
            CREATE USER \`${DB_USER}\`@\`${ALLOWED_HOST}\`
                IDENTIFIED BY '${DB_PASSWORD}';"
      else
        SQL_QUERY="${SQL_QUERY}
            GRANT ${PRIVILEGES} ON \`${DB_NAME}\`.*
                TO \`${DB_USER}\`@\`${ALLOWED_HOST}\`
                IDENTIFIED BY '${DB_PASSWORD}';"
      fi
    done

    if mysql_call "${MYSQL_CLIENT}" "${MYSQL_HOST}" \
        "${MYSQL_USER}" "${MYSQL_PASSWORD}" \
        --execute="${SQL_QUERY}"; then
      if [ -z "${BASE_DB_NAME}" ]; then
        command echo "# MySQL User access parameters are :
# MySQL user
MYSQL_USER=${DB_USER}
# MySQL user password
MYSQL_PASSWORD=${DB_PASSWORD}"
      else
        command echo "# Database access parameters are :
# Database name
MYSQL_DB=${DB_NAME}
# Database user
MYSQL_USER=${DB_USER}
# Database user password
MYSQL_PASSWORD=${DB_PASSWORD}"
      fi

      exit 0
    fi

    if [ -z "${BASE_DB_NAME}" ]; then
      echo "Error: unable to create user '${DB_USER}'." >&2
    else
      echo "Error: unable to create user '${DB_USER}' for database '${DB_NAME}'." >&2
    fi
    exit 1
    ;;



  deluser )
    SQL_QUERY="SELECT \`user\`, \`host\`
                    FROM \`mysql\`.\`user\`
                    WHERE \`user\` = '${DB_USER}';"

    # Dropping users.
    SQL_QUERY="$(mysql_call "${MYSQL_CLIENT}" "${MYSQL_HOST}" \
          "${MYSQL_USER}" "${MYSQL_PASSWORD}" --batch --skip-column-names \
          --skip-line-numbers --skip-pager \
          --execute="${SQL_QUERY}" \
        | command sed -e "s/\(.*\)\t\(.*\)/DROP USER '\1'@'\2';/")"
    if mysql_call "${MYSQL_CLIENT}" "${MYSQL_HOST}" \
        "${MYSQL_USER}" "${MYSQL_PASSWORD}" \
        --execute="${SQL_QUERY}"; then

      echo "User '${DB_USER}' successfully deleted."
      exit 0
    fi

    echo "Error: unable to delete user '${DB_USER}'." >&2
    exit 1
    ;;



  * )
    echo "Error : '${1}' is not a valid action." >&2
    usage 1
    ;;
esac

exit 0
