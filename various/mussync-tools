#!/bin/bash
#
# Music library convert and sync.
#
# For suggestion and bug reports, please contact
# Pierre-Yves Landuré <pierre-yves dot landure at biapy dot fr>
#
# Thanks to m31z0nyx on irc.freenode.net #debian-facile for his help i
# finding a script name.
#
# Thanks to GNU Parallel.
#  O. Tange (2011): GNU Parallel - The Command-Line Power Tool,
#  ;login: The USENIX Magazine, February 2011:42-47.
#
version="1.4.6"



# Get the basename of a path (multi-plateform version)
# Print the result on &1 if found.
#
# @param string $path A path.
#
# @return A return code..
function basename() {

  [[ ${#} -eq 0 ]] && exit 1

  case "$(uname)" in
    'Linux' )
      command basename -z -- "${@}"
      ;;
    'Darwin' | * )
      command basename -- "${@}"
      ;;
  esac

  return ${?}
} # basename()
export -f 'basename'


script_name="$(basename "${0}")"



# Print this script help.
function usage {
  echo "Music library convert and sync v${version}
This tool convert a input (Flac) music library to an output (MP3) music folder
and keep the folder structure.

Usage :

  ${script_name} [ --help ] [ --quiet ] [ --verbose ]
      --input-path='/path/to/original/library'
      [ --output-path='/path/to/converted/library' ]
      [ --input-format='*' ] [ --output-format='mp3' ]
      [ --bitrate='320k' | --quality=5 ]
      [ --sync-delete ] [ --copy-all ]
      [ --avconv-options='--more --avconv --options' ]

  Available options are :
    * --help | -h                   : Display this message.
    * --input-path  | --in  | -i    : Set the path to the source library
                                      (mandatory)
    * --output-path | --out | -o    : Set the path to the target library
                                      (default to source library)
    * --input-format  | --if        : Set the input format. Default to *.
    * --output-format | --of | -e   : Set the output format. Default to MP3.
    * --bitrate | -b                : Set the CBR bitrate. Default to 192k.
                                      Trigger CBR encoding.
    * --quality | -q                : Set the VBR quality. Default to 5.
                                      0 is the lowest, 9 the highest.
                                      Trigger VBR encoding (default).
    * --replaygain | --gain | -g    : Apply album replay gain to converted
                                      files.
    * --sync-delete | --delete | -d : Propagate file deletion from input
                                      library to output library.
                                      Any output file without equivalence in
                                      input library is deleted.
    * --copy-all | --copy | -c      : Copy non audio files found in source
                                      library to target library.
    * --avconv-options | -a         : Additionnal options for avconv.
                                      See avconv man page.
    * --threads | -t                : Threads number.
                                      Default to 1 thread by CPU.
    * --quiet | --silent | -s       : Disable almost all outputs.
    * --verbose | -v                : Enable debug outputs.

  Completly supported formats are :
    * MP3 (mp3)
    * Flac (flac)
    * Ogg/Vorbis (ogg)

    When converting from/to this formats, metadatas and cover art are
    transfered to the created files.
"

  [[ -n "${1}" ]] && exit ${1}
} # usage



# Get the dirname of a path (multi-plateform version)
# Print the result on &1 if found.
#
# @param string $path A path.
#
# @return A return code..
function dirname() {

  [[ ${#} -eq 0 ]] && exit 1

  case "$(uname)" in
    'Linux' )
      command dirname -z -- "${@}"
      ;;
    'Darwin' | * )
      command dirname -- "${@}"
      ;;
  esac

  return ${?}
} # dirname()
export -f 'dirname'


# Get the absolute path for a file or directory.
#
# @param string $path A relative path.
#
# @return ${realpath} A absolute path.
realpath=''
function realpath() {
  # declare -g realpath=''
  realpath=''

  [[ ${#} -ne 1 ]] && exit 1

  case "$(uname)" in
    'Linux' )
      realpath="$(readlink -f "${1}")"
      ;;
    'Darwin' )
      realpath="$(stat -f '%N' "${1}")"
      ;;
    * )
      realpath="$(realpath "${1}")"
      ;;
  esac
} # realpath



# Get the absolute path for a file or directory and check the file existance.
# If the file does not exists, display an error message and exit the script.
#
# @param string $path A relative path.
#
# @return ${realpath} A absolute path or an empty string if file don't exists.
realpath=''
function realpath_check() {
  # declare -g realpath=''
  realpath=''

  [[ ${#} -ne 1 ]] && exit 1

  realpath "${1}"

  if [[ -n "${realpath}" && ! -e "${realpath}" ]]; then
    realpath=""
  fi

  if [[ -z "${realpath}" ]]; then
    echo "Error: File '${1}' does not exists." >&2
    exit 1
  fi
} # realpath_check



# Check if a binary is present
#
# @param string $binary The binaries to check, separated by ;.
# @param string $package The package the binary come from.
#
# @return Exit with error if the binary is missing.
binary=''
function check_binary() {
  # declare -g binary=''
  binary=''

  [[ ${#} -ne 2 ]] && exit 1

  local primary="$(echo -n "${1}" | cut -d ';' -f 1)"
  local binaries="";

  IFS=';' read -a binaries <<< "${1}"

  # Test the binary presence.
  for binary in ${binaries[@]}; do
    if type "${binary}" > '/dev/null'; then
      binary="$(command -v "${binary}")"
      return 0
    fi
  done

  echo "Error: '${primary}' is missing. Please install package '${2}'." >&2
  exit 1
} # check_binary



#
# Multi platform avconv support.
#
function avconv() {
  if type 'avconv' > '/dev/null'; then
    command avconv "${@}"
    return ${?}
  fi

  if type 'ffmpeg' > '/dev/null'; then
    command ffmpeg "${@}"
    return ${?}
  fi

  exit 1
} # avconv()
export -f 'avconv'



#
# Multi platform mp3gain support.
#
function mp3gain() {
  if type 'mp3gain' > '/dev/null'; then
    command mp3gain "${@}"
    return ${?}
  fi

  if type 'aacgain' > '/dev/null'; then
    command aacgain "${@}"
    return ${?}
  fi

  exit 1
} # mp3gain()
export -f 'mp3gain'



#
# Multi platform parallel support.
#
function parallel() {
  # Detect parallel line based on OS.
  case "$(uname)" in
    'Darwin' )
      command parallel --no-notice "${@}"
      return ${?}
      ;;
    'Linux' | * )
      # Nothing to do.
      command parallel "${@}"
      return ${?}
      ;;
  esac
} # parallel()
export -f 'parallel'



#
# Multi platform base64 support.
#
function base64() {
  # Detect parallel line based on OS.
  case "$(uname)" in
    'Darwin' )
      command base64 --break=0 "${@}"
      return ${?}
      ;;
    'Linux' | * )
      # Nothing to do.
      command base64 --wrap=0 "${@}"
      return ${?}
      ;;
  esac
} # base64()
export -f 'base64'



#
# Multi platform eyed3 support.
#
function eyed3() {
  if type 'eyeD3' > '/dev/null'; then
    eyeD3 "${@}"
    return ${?}
  fi

  if type 'eyeD3-2.7' > '/dev/null'; then
    eyeD3-2.7 "${@}"
    return ${?}
  fi

  if type 'eyeD3-2.6' > '/dev/null'; then
    eyeD3-2.6 "${@}"
    return ${?}
  fi

  exit 1
} # eyed3()
export -f 'eyed3'



#
# Multi platform eyed3 remove all support.
#
function eyed3_remove_all() {
  # Detect parallel line based on OS.
  case "$(uname)" in
    'Darwin' )
      eyed3 --remove-all-images "${@}"
      return ${?}
      ;;
    'Linux' | * )
      # Nothing to do.
      eyed3 --remove-images "${@}"
      return ${?}
      ;;
  esac
} # eyed3_remove_all()
export -f 'eyed3_remove_all'



# Echo text in color.
#
# Colors definitions.
# See http://mywiki.wooledge.org/BashFAQ/037
#
# @param string $color Color and weight for text. (boldgreen for example).
# @param string $text The text to echo (and echo options).
function cecho() {
  if [[ ${#} -lt 2 ]]; then
    echo "${@}"
    return 0
  fi

  local color="${1}"

  # remove color information from arguments.
  shift 1

  # Bash 4 version with associative array.
  ## Color and weight definitions.
  #declare -A font
  #font['black']="$(tput 'setaf' 0)"
  #font['red']="$(tput 'setaf' 1)"
  #font['green']="$(tput 'setaf' 2)"
  #font['yellow']="$(tput 'setaf' 3)"
  #font['blue']="$(tput 'setaf' 4)"
  #font['magenta']="$(tput 'setaf' 5)"
  #font['cyan']="$(tput 'setaf' 6)"
  #font['white']="$(tput 'setaf' 7)"

  #font['bgBlack']="$(tput 'setab' 0)"
  #font['bgRed']="$(tput 'setab' 1)"
  #font['bgGreen']="$(tput 'setab' 2)"
  #font['bgYellow']="$(tput 'setab' 3)"
  #font['bgBlue']="$(tput 'setab' 4)"
  #font['bgMagenta']="$(tput 'setab' 5)"
  #font['bgCyan']="$(tput 'setab' 6)"
  #font['bgWhite']="$(tput 'setab' 7)"

  #font['bold']="$(tput 'bold')"
  #font['stout']="$(tput 'smso')" # Standout.
  #font['under']="$(tput 'smul')" # Underline.
  #font['blink']="$(tput 'blink')" # Blinking
  #font['italic']="$(tput 'sitm')"

  ## Parse the color string.
  #for key in "${!font[@]}"; do
  #  [[ "${color}" = *"${key}"* ]] && echo -n "${font[${key}]}"
  #done

  declare -a fontIndex
  declare -a fontValue

  local index=0
  fontIndex[$index]='black';     fontValue[$index]="$(tput 'setaf' 0)"; ((index++))
  fontIndex[$index]='red';       fontValue[$index]="$(tput 'setaf' 1)"; ((index++))
  fontIndex[$index]='green';     fontValue[$index]="$(tput 'setaf' 2)"; ((index++))
  fontIndex[$index]='yellow';    fontValue[$index]="$(tput 'setaf' 3)"; ((index++))
  fontIndex[$index]='blue';      fontValue[$index]="$(tput 'setaf' 4)"; ((index++))
  fontIndex[$index]='magenta';   fontValue[$index]="$(tput 'setaf' 5)"; ((index++))
  fontIndex[$index]='cyan';      fontValue[$index]="$(tput 'setaf' 6)"; ((index++))
  fontIndex[$index]='white';     fontValue[$index]="$(tput 'setaf' 7)"; ((index++))

  fontIndex[$index]='bgBlack';   fontValue[$index]="$(tput 'setab' 0)"; ((index++))
  fontIndex[$index]='bgRed';     fontValue[$index]="$(tput 'setab' 1)"; ((index++))
  fontIndex[$index]='bgGreen';   fontValue[$index]="$(tput 'setab' 2)"; ((index++))
  fontIndex[$index]='bgYellow';  fontValue[$index]="$(tput 'setab' 3)"; ((index++))
  fontIndex[$index]='bgBlue';    fontValue[$index]="$(tput 'setab' 4)"; ((index++))
  fontIndex[$index]='bgMagenta'; fontValue[$index]="$(tput 'setab' 5)"; ((index++))
  fontIndex[$index]='bgCyan';    fontValue[$index]="$(tput 'setab' 6)"; ((index++))
  fontIndex[$index]='bgWhite';   fontValue[$index]="$(tput 'setab' 7)"; ((index++))

  fontIndex[$index]='bold';      fontValue[$index]="$(tput 'bold')"; ((index++))
  fontIndex[$index]='stout';     fontValue[$index]="$(tput 'smso')"; ((index++)) # Standout.
  fontIndex[$index]='under';     fontValue[$index]="$(tput 'smul')"; ((index++)) # Underline.
  fontIndex[$index]='blink';     fontValue[$index]="$(tput 'blink')"; ((index++)) # Blinking.
  fontIndex[$index]='italic';    fontValue[$index]="$(tput 'sitm')"; ((index++))

  for key in "${!fontIndex[@]}"; do
    [[ "${color}" = *"${fontIndex[${key}]}"* ]] && echo -n "${fontValue[${key}]}"
  done

  # Output the text.
  echo "${@}"

  # Reset all attributes.
  tput 'sgr0'

  return 0
} # cecho()
export -f 'cecho'



# Transfert cover art from input file to output file.
# Reset all cover art in output file.
#
# @param string $input_file The audio input file.
# @param string $output_file The audio output file.
#
# @return Exit with error if conversion failed.
function transfert_images() {
  [[ ${#} -ne 2 ]] && exit 1

  local input_file="${1}"
  local output_file="${2}"

  # Detect if input file has cover art.
  local input_file_has_cover="$(mediainfo --Inform="General;%Cover%" "${input_file}")"
  local metadata_block_picture='False'

  # temporary files.
  local image_path=""
  local image_with_headers_path=""
  local comments_path=""
  local mp3_images_path=""

  #------------------------
  # Trap handling function
  # use with: trap 'exit_transfert_images_on_signal "${output_file}" "${image_path}" "${image_with_headers_path}" "${comments_path}" "${mp3_images_path}"' SIGHUP SIGINT SIGQUIT SIGKILL SIGTERM
  #
  # @param string $output_file The converted/copied output file.
  # @param string $image_path The extracted image temporary file.
  function exit_transfert_images_on_signal() {
    local interrupt=${?}

    local output_file="${1}"
    local image_path="${2}"
    local image_with_headers_path="${3}"
    local comments_path="${4}"
    local mp3_images_path="${5}"

    local vctemp="${output_file}.vctemp"
    local output_filename="$(basename "${output_file}")"

    cecho 'boldred' "Image transfert to '${output_filename}' interrupted." >&2
    [[ -n "${output_file}" && -e "${output_file}" ]] && rm "${output_file}"
    [[ -n "${image_path}" && -e "${image_path}" ]] && rm "${image_path}"
    [[ -n "${image_with_headers_path}" && -e "${image_with_headers_path}" ]] && rm "${image_with_headers_path}"
    [[ -n "${comments_path}" && -e "${comments_path}" ]] && rm "${comments_path}"
    [[ -n "${mp3_images_path}" && -d "${mp3_images_path}" ]] && rm -r "${mp3_images_path}"

    #local running_jobs=($(jobs -p))
    #if [[ -n "${running_jobs}" ]]; then
    #  cecho 'yellow' " -> Stopping conversion jobs (${running_jobs[@]})." >&2
    #  kill ${running_jobs[@]} 2>'/dev/null'
    #fi

    if [[ ${interrupt} -eq 2 ]]; then
      # killing self if catched a SIGINT.
      # see http://mywiki.wooledge.org/SignalTrap
      trap - SIGINT
      kill -INT $$
    else
      exit 0
    fi
  } # exit_transfert_images_on_signal()
  #------------------------


  if [[ "${input_file_has_cover}" != 'Yes' \
      && -n "$(mediainfo "${input_file}" | grep --ignore-case '^METADATA_BLOCK_PICTURE')" ]]; then
    input_file_has_cover='Yes'
    metadata_block_picture='True'
  fi

  if [[ "${input_file_has_cover}" = 'Yes' ]]; then
    echo -n "     + Transfering cover art to "
    cecho 'magenta' -n "$(basename "${output_file}")"
    echo -n "... "

    # Setup trap since there is processing needed.
    trap 'exit_transfert_images_on_signal "${output_file}" "${image_path}" "${image_with_headers_path}" "${comments_path}" "${mp3_images_path}"' SIGHUP SIGINT SIGQUIT SIGKILL SIGTERM


    # Detect Cover MIME type.
    local image_mime_type="$(mediainfo --Inform="General;%Cover_Mime%" "${input_file}")"
    local image_extension="$(echo -n "${image_mime_type}" | cut -d '/' -f 2)"

    if [[ -z "${image_extension}" ]]; then
      if [[ "${metadata_block_picture}" != 'True' ]]; then
        # Unable to determine cover mime type.
        echo "Failed (MIME type unsupported (${image_mime_type}))."
        return 1
      fi
    else
      # Create image temporary file. 
      image_path="$(mktemp -t "tmp.XXXXXXXXXX")"
      mv "${image_path}" "${image_path}.${image_extension}"
      image_path="${image_path}.${image_extension}"
    fi

    # Detect input file format and audio format.
    local input_file_format="$(mediainfo --Inform="General;%Format%" "${input_file}")"
    local input_file_audio_format="$(mediainfo --Inform="Audio;%Format%" "${input_file}")"

    cecho 'blue' -n "Extracting... "

    case "${input_file_format}" in

      'FLAC' )
        # File is Flac

        # List IMAGE metadata blocs.
        # Assume first bloc is cover art.
        local block_number="$(metaflac --list --block-type='PICTURE' "${input_file}" \
            | grep --max-count=1 '^METADATA block' \
            | sed -e 's/^.*#//')"

        # Determine cover image MIME type.
        image_mime_type="$(metaflac --block-number="${block_number}" --list "${input_file}" \
            | grep "MIME type:" \
            | sed -e 's/.*MIME type: //g')"

        # Extract cover image from file.
        metaflac --block-number="${block_number}" \
            --export-picture-to="${image_path}" "${input_file}"
        ;;

      'MPEG Audio' )
        # File is MP3
        mp3_images_path="$(mktemp -d -t "tmp.XXXXXXXXXX")"

        if [[ "${verbose}" = 'True' ]]; then
          eyed3 --write-images="${mp3_images_path}" "${input_file}"
        else
          eyed3 --write-images="${mp3_images_path}" "${input_file}" > '/dev/null' 2>&1
        fi

        if [[ -e "${mp3_images_path}/FRONT_COVER.${image_extension}" ]]; then
          mv "${mp3_images_path}/FRONT_COVER.${image_extension}" "${image_path}"
        fi

        rm -r "${mp3_images_path}"
        ;;

      'OGG' )
        # File is an OGG container.
        case "${input_file_audio_format}" in

          'Vorbis' )
            # File is OGG Vorbis.

            image_with_headers_path="$(mktemp -t "tmp.XXXXXXXXXX")"

            vorbiscomment --list --raw "${input_file}" \
                | grep --ignore-case --max-count=1 '^METADATA_BLOCK_PICTURE=' \
                | sed -e 's/^METADATA_BLOCK_PICTURE=//I' \
                | base64 --decode \
              > "${image_with_headers_path}"

            # Fetch data lengths.
            local mime_length="$(dd skip=4 count=4 bs=1 \
                if="${image_with_headers_path}" 2>'/dev/null' \
                | xxd -p -g0 \
                | xargs -IHEX printf "%d" '0xHEX')"

            image_mime_type="$(dd skip=8 count="${mime_length}" bs=1 \
                if="${image_with_headers_path}" 2>'/dev/null')"

            # Now we try to detect extension and create the temporary image file.
            image_extension="$(echo -n "${image_mime_type}" | cut -d '/' -f 2)"
            if [[ -z "${image_extension}" ]]; then
              # Unable to determine cover mime type.
              [[ -e "${image_with_headers_path}" ]] && rm "${image_with_headers_path}"

              cecho 'red' "Failed (MIME type unsupported (${image_mime_type}))."
              return 1
            fi

            image_path="$(mktemp -t "tmp.XXXXXXXXXX")"
            mv "${image_path}" "${image_path}.${image_extension}"
            image_path="${image_path}.${image_extension}"

            local description_skip="$((8 + ${mime_length}))"
            local description_length="$(dd skip=${description_skip} count=4 bs=1 \
                if="${image_with_headers_path}" 2>'/dev/null' \
                | xxd -p -g0 \
                | xargs -IHEX printf "%d" '0xHEX')"
            local image_length_skip="$((${description_skip} + ${description_length} + 20))"
            local image_length="$(dd skip=${image_length_skip} count=4 bs=1 \
                if="${image_with_headers_path}" 2>'/dev/null' \
                | xxd -p -g0 \
                | xargs -IHEX printf "%d" '0xHEX')"

            local image_skip="$((${image_length_skip} + 4))"
            # Extract image.

            if [[ "${verbose}" = 'True' ]]; then
              dd skip=${image_skip} count=${image_length} bs=1 \
                  if="${image_with_headers_path}" of="${image_path}"
            else
              dd skip=${image_skip} count=${image_length} bs=1 \
                  if="${image_with_headers_path}" of="${image_path}" 2>'/dev/null'
             fi

            # Delete vorbiscomment raw file.
            [[ -e "${image_with_headers_path}" ]] && rm "${image_with_headers_path}"
            ;;

          * )
            [[ -e "${image_path}" ]] && rm "${image_path}"
            cecho 'red' "Failed (Ogg audio encoding unsupported (${input_file_audio_format}))."
            return 1
            ;;

        esac

        ;;

      * )
        [[ -e "${image_path}" ]] && rm "${image_path}"

        cecho 'red' "Failed (Input file format unsupported (${input_file_format}))."
        return 1
        ;;

    esac

    # Test if an image has been extracted from input_file and if we have an output_file.
    if [[ -s "${image_path}" && -e "${output_file}" ]]; then
      cecho 'blue' -n "Importing... "

      # Detect output file format and audio format.
      local output_file_format="$(mediainfo --Inform="General;%Format%" "${output_file}")"
      local output_file_audio_format="$(mediainfo --Inform="Audio;%Format%" "${output_file}")"

      case "${output_file_format}" in

        'FLAC' )
          # File is Flac
          # Remove existing images.
          metaflac --block-type='PICTURE' --dont-use-padding --remove "${output_file}"
          # Insert cover image from file.
          metaflac --import-picture-from="${image_path}" "${output_file}"
          ;;

        'MPEG Audio' )
          # File is MP3
          if [[ "${verbose}" = 'True' ]]; then
            # Remove existing images.
            eyed3_remove_all "${output_file}"
            # Insert cover image from file
            eyed3 --add-image="${image_path}:FRONT_COVER" "${output_file}"
          else
            # Remove existing images.
            eyed3_remove_all "${output_file}" > '/dev/null' 2>&1
            # Insert cover image from file
            eyed3 --add-image="${image_path}:FRONT_COVER" "${output_file}" > '/dev/null' 2>&1
          fi
          ;;

        'OGG' )
          # File is an OGG container.
          case "${output_file_audio_format}" in

            'Vorbis' )
              # File is OGG Vorbis.

              # Export existing comments to file.
              comments_path="$(mktemp -t "tmp.XXXXXXXXXX")"

              vorbiscomment --list --raw "${output_file}" > "${comments_path}"

              # Remove existing images.
              sed -i'' -e '/^METADATA_BLOCK_PICTURE/Id' "${comments_path}"

              # Insert cover image from file.

              # metadata_block_picture format.
              # See: https://xiph.org/flac/format.html#metadata_block_picture

              image_with_headers_path="$(mktemp -t "tmp.XXXXXXXXXX")"
              local description=""

              # Reset cache file.
              echo -n "" > "${image_with_headers_path}"

              # Picture type <32>.
              printf "0: %.8x" 3 | xxd -r -g0 \
                      >> "${image_with_headers_path}"
              # Mime type length <32>.
              printf "0: %.8x" $(echo -n "${image_mime_type}" | wc -c) \
                        | xxd -r -g0 \
                      >> "${image_with_headers_path}"
              # Mime type (n * 8)
              echo -n "${image_mime_type}" >> "${image_with_headers_path}"
              # Description length <32>.
              printf "0: %.8x" $(echo -n "${description}" | wc -c) \
                        | xxd -r -g0 \
                      >> "${image_with_headers_path}"
              # Description (n * 8)
              echo -n "${description}" >> "${image_with_headers_path}"
              # Picture with <32>.
              printf "0: %.8x" 0 | xxd -r -g0 \
                      >> "${image_with_headers_path}"
              # Picture height <32>.
              printf "0: %.8x" 0 | xxd -r -g0 \
                      >> "${image_with_headers_path}"
              # Picture color depth <32>.
              printf "0: %.8x" 0 | xxd -r -g0 \
                      >> "${image_with_headers_path}"
              # Picture color count <32>.
              printf "0: %.8x" 0 | xxd -r -g0 \
                      >> "${image_with_headers_path}"
              # Image file size <32>.
              printf "0: %.8x" $(wc -c "${image_path}" \
                        | cut -d ' ' -f 1) \
                        | xxd -r -g0 \
                      >> "${image_with_headers_path}"
              # Image file.
              cat "${image_path}" >> "${image_with_headers_path}"

              echo "METADATA_BLOCK_PICTURE=$(base64 < "${image_with_headers_path}")" >> "${comments_path}"

              # Update vorbis file comments.
              vorbiscomment --write --raw --commentfile "${comments_path}" "${output_file}"

              # Delete cache file.
              [[ -e "${image_with_headers_path}" ]] && rm "${image_with_headers_path}"
              # Delete comments file.
              [[ -e "${comments_path}" ]] && rm "${comments_path}"
              ;;

            * )
              [[ -e "${image_path}" ]] && rm "${image_path}"
              cecho 'red' "Failed (Ogg audio encoding unsupported (${output_file_audio_format}))."
              return 1
              ;;

          esac

          ;;

        * )
          [[ -e "${image_path}" ]] && rm "${image_path}"

          cecho 'red' "Failed (Output file format unsupported (${output_file_format}))."
          return 1
          ;;

      esac
 
    fi

    [[ -e "${image_path}" ]] && rm "${image_path}"


    cecho 'green' "Done."
  fi

  return 0
} # transfert_images()
export -f 'transfert_images'



# Convert an audio file from source library to target library.
#
# @param string $input_file The audio input file.
#
# @return Exit with error if conversion failed.
function convert_file() {
  [[ ${#} -ne 1 ]] && exit 1

  local input_file="${1}"

  ## Build output file path based on input file path.
  local input_file_path="$(dirname "${input_file}")"
  local output_file_path="$(echo -n "${input_file_path}" | sed -e "s|^${input_path}|${output_path}|")"
  local short_path="$(echo -n "${input_file_path}" | sed -e "s|^${input_path}/||")"

  local input_filename="$(basename "${input_file}")"
  local output_filename="$(echo -n "${input_filename}" \
        | sed -e "s/\.[^\.]*$/\.${output_extension}/")"
  local input_file_mimetype="$(file --brief --mime-type "${input_file}")"

  # Detect input extension
  local input_file_extension="$(echo -n "${input_filename}" \
        | sed -e 's/^.*\.\([^\.]*\)$/\1/')"

  local output_file="${output_file_path}/${output_filename}"

  #local short_input_file="${short_path}/${input_filename}"
  local short_input_file="${input_filename}"
  local short_output_file="${output_filename}"

  #------------------------
  # Trap handling function
  # use with: trap "exit_convert_file_on_signal '${output_file}'" SIGHUP SIGINT SIGQUIT SIGKILL SIGTERM
  #
  # @param string $output_file The converted/copied output file.
  function exit_convert_file_on_signal() {
    local interrupt=${?}
    local output_file="${1}"
    local output_filename="$(basename "${output_file}")"

    cecho 'boldred' "Conversion of '${output_filename}' interrupted." >&2
    [[ -n "${output_file}" && -e "${output_file}" ]] && rm "${output_file}"

    #local running_jobs=($(jobs -p))
    #if [[ -n "${running_jobs}" ]]; then
    #  cecho 'yellow' " -> Stopping conversion jobs (${running_jobs[@]})." >&2
    #  kill ${running_jobs[@]} 2>'/dev/null'
    #fi

    if [[ ${interrupt} -eq 2 ]]; then
      # killing self if catched a SIGINT.
      # see http://mywiki.wooledge.org/SignalTrap
      trap - SIGINT
      kill -INT $$
    else
      exit 0
    fi
  } # exit_convert_file_on_signal()
  #------------------------

  # Test if input file is an audio file.
  if [[ "${input_file_mimetype}" != 'application/ogg' \
      && "$(echo -n "${input_file_mimetype}" \
            | cut -d '/' -f 1)" != 'audio' ]]; then
    # Input file is not an audio file.
    echo -n '   - '
    cecho 'magenta' -n "${short_input_file}"
    echo -n " is not a audio file... "

    # Update computed values.
    output_filename="${input_filename}"
    output_file="${output_file_path}/${output_filename}"
    short_output_file="${output_filename}"

    local copy_needed='FALSE'

    if [[ "${copy_all}" = 'True' ]]; then

      if [[ ! -e "${output_file}" ]]; then
        copy_needed='True'
        cecho 'blue' 'Copying.'
      else
        # Check if output file is older than input file.
        if [[ "${input_file}" -nt "${output_file}" ]]; then
          cecho 'blue' 'Updating.'
          copy_needed='True'
        else
          cecho 'yellow' 'Skipping.'
        fi
      fi
    else
      cecho 'yellow' 'Skipping.'
    fi

    if [[ "${copy_needed}" = 'True' ]]; then
      trap 'exit_convert_file_on_signal "${output_file}"' SIGHUP SIGINT SIGQUIT SIGKILL SIGTERM

      cp -a "${input_file}" "${output_file}"
      return $?
    fi

    return 0
  fi


  local conversion_needed='False'
  # Check if output file already exists.
  if [[ "${input_extension}" = '*' \
      || "${input_extension}" = "${input_file_extension}" ]]; then
    if [[ ! -e "${output_file}" ]]; then
      conversion_needed='True'
    else
      echo -n '   - '
      cecho 'magenta' -n "${short_output_file}"
      echo -n " exists... "

      # Check if output file is older than input file.
      if [[ "${input_file}" -nt "${output_file}" ]]; then
        cecho 'blue' 'Updating.'
        conversion_needed='True'
      else
        cecho 'yellow' 'Skipping.'
      fi
    fi
  else
    # Found file has not the correct extension.
    cecho 'magenta' -n "${short_input_file}"
    echo " is not in source format... "
    cecho 'yellow' 'Skipping.'
  fi

  if [[ "${conversion_needed}" = 'True' ]]; then
    if [[ -e "${input_file}" ]]; then
      trap 'exit_convert_file_on_signal "${output_file}"' SIGHUP SIGINT SIGQUIT SIGKILL SIGTERM

      mkdir -p "${output_file_path}"

      if [[ -d "${output_file_path}" ]]; then
        # Remove output file if it already exists.
        if [[ -e "${output_file}" ]]; then
          rm "${output_file}"
        fi

        if [[ "${input_format}" = "${output_format}" ]]; then
          # Copy input to output (format is the same).
          # Convert input to output
          echo -n "   - Copying "
          cecho 'magenta' -n "${short_input_file}"
          echo -n ' to '
          cecho 'magenta' -n "${short_output_file}"
          echo -n '... '

          cp "${input_file}" "${output_file}"

          cecho 'green' "Done."
        else
          # Convert input to output
          echo -n "   - Converting "
          cecho 'magenta' -n "${short_input_file}"
          echo -n ' to '
          cecho 'magenta' -n "${short_output_file}"
          echo -n '... '

          local log_level='quiet'
          if [[ "${verbose}" = 'True' ]]; then
            log_level='debug'
          fi

          local encoding_options=''
          local pipe_mode='False'
          # Specific options for encoding mode.
          case "${encoding_mode}" in
            'CBR' )
              # Constant bitrate selected.
              encoding_options="-b:a ${encoding_bitrate}"
             ;;

            'VBR' | * )
              # Variable bitrate selected. Default.
              encoding_options="-q:a ${encoding_quality}"
              ;;
          esac

          local map_metadata=' 0:g'
          local output_options=''
          # Specific needs for some input formats/
          case "${input_file_mimetype}" in
            'application/ogg' )
              # Get input metadata from first audio stream and direct it to global.
              # See https://bugs.kde.org/show_bug.cgi?id=306895
              map_metadata=' 0:s:0'

              # Clean picture metadata.
              output_options="${output_options} -metadata metadata_block_picture=''"
              ;;
            * )
              # Do nothing.
              # map_metadata=' 0:g'
              ;;
          esac

          # Specific needs for some output formats/
          case "${output_format}" in
            'flac' )
              # No encoding options needed.
              encoding_options=""
              output_options="${output_options} -f ${output_format}"
              ;;

            'ogg' | 'vorbis' )
              # Set vorbis as default codec for ogg.
              output_options="${output_options} -codec:a libvorbis -f ogg"
              # Map input metadata to all audio streams in ogg container.
              # See https://bugs.kde.org/show_bug.cgi?id=306895
              if [[ "${input_file_mimetype}" = 'application/ogg' ]]; then
                map_metadata=" 0:s:0"
              else
                map_metadata=":s:a 0:s:0"
              fi
              ;;

            'mp3' )
              # Force libmp3lame use.
              output_options="${output_options} -f ${output_format} -codec:a libmp3lame"

              if [[ ${encoding_mode} = 'CBR' ]]; then
                pipe_mode='True'
              fi

              ;;

            * )
              # Add output format.
              # map_metadata="${map_metadata}"
              output_options="${output_options} -f ${output_format}"
              ;;
          esac

          if [[ "${pipe_mode}" = 'True' ]]; then
            # Fix for mp3 cbr format, breaks mp3 vbr files since
            # Xing header writing needs seekable file..
            # Write output on pipe and then directed to file.
            # See: http://ffmpeg.zeranoe.com/forum/viewtopic.php?f=7&t=377
            #
            # Note: log output is alway on 2. avconv keep 1 empty.

            avconv -i "${input_file}" \
                     -vn -sn \
                    -map_metadata${map_metadata} \
                    -loglevel "${log_level}" \
                    ${avconv_options} \
                    ${output_options} \
                    ${encoding_options} \
                    - > "${output_file}";
          else
            avconv -i "${input_file}" \
                     -vn -sn \
                    -map_metadata${map_metadata} \
                    -loglevel "${log_level}" \
                    ${avconv_options} \
                    ${output_options} \
                    ${encoding_options} \
                    "${output_file}";
          fi


          if [[ ${?} -ne 0 ]]; then
            cecho 'red' "Failed."

            # Force > output to be written on disk.
            sync

            [[ -e "${output_file}" ]] && rm "${output_file}"

            return 1
          else
            # Force > output to be written on disk.
            sync
            cecho 'green' "Done."

            # Fetch cover art from input file.
            if [[ -e "${input_file}" && -e "${output_file}" ]]; then
              transfert_images "${input_file}" "${output_file}"
            fi
          fi
        fi
      else
        cecho 'red' "Error: unable to create folder '${output_file_path}'." >&2

        return 1
      fi
    else
      echo -n "'${input_file}' not found... "
      cecho 'yellow' 'Skipping.'
    fi
  fi

  return 0
} # convert_file()

# Export convert_file for usage with Parallel / Sem.
export -f 'convert_file'



# Apply replaygain to a converted album.
#
# @param string $output_format The output audio format.
# @param string $output_extension The output audio file extension.
# @param string $verbose True for verbose output.
# @param string $input_album_path The input album path.
function replaygain_album() {
  [[ ${#} -ne 4 ]] && exit 1

  local output_format="${1}"
  local output_extension="${2}"
  local verbose="${3}"
  local input_album_path="${4}"

  ## Build output album path based on input album path.
  local output_album_path="$(echo -n "${input_album_path}" \
        | sed -e "s|^${input_path}|${output_path}|")"

  local album_name="$(basename "${output_album_path}")"

  # test if output album path exists.
  [[ -d "${output_album_path}" ]] || return 1

  # test if output album path is empty.
  shopt -s nullglob dotglob
  local album_files=("${output_album_path}"/*".${output_extension}")
  shopt -u nullglob dotglob

  (( ${#album_files[*]} )) || return 1
  echo -n "   + Processing replay gain for album '"
  cecho 'magenta' -n "${album_name}"
  echo -n "'... "

  case "${output_format}" in
    'mp3' )
      # reference:
      # mp3gain  -a -t -p -s r -k -f

      local processed_list_log_path="$(mktemp -t "tmp.XXXXXXXXXX")"

      if [[ "${verbose}" = 'True' ]]; then
        mp3gain -a -t -p -k -f -q "${album_files[@]}" | tee "${processed_list_log_path}"
      else
        mp3gain -a -t -p -k -f -q "${album_files[@]}" > "${processed_list_log_path}" 2>'/dev/null'
      fi

      local error_code=${?}

      if [[ ${error_code} -ne 0 ]]; then
        cecho 'red' 'Failure.'

        if [[ ${error_code} = 139 ]]; then
          # mp3gain segfaulted. Handling the faulty mp3 file removal and regeneration.
          local faulty_file_index=$(wc -l "${processed_list_log_path}" \
                                    | cut --delimiter=' ' --fields=1)
          local faulty_file="${album_files[${faulty_file_index}]}"
          if [[ -n "${faulty_file}" ]]; then
            local faulty_filename="$(basename "${faulty_file}")"

            cecho 'red' -n 'File '
            cecho 'magenta' -n "${faulty_filename}"
            cecho 'red' -n ' is faulty... '
            cecho 'red' -n 'Deleting... '

            test -e "${faulty_file}" && rm "${faulty_file}"
            test -e "${processed_list_log_path}" && rm "${processed_list_log_path}"

            cecho 'yellow' 'Regenerating.'
            return 139
          fi
        fi

        test -e "${processed_list_log_path}" && rm "${processed_list_log_path}"
        return 1
      fi

      test -e "${processed_list_log_path}" && rm "${processed_list_log_path}"
      ;;
    'flac' )
      metaflac --add-replay-gain "${album_files[@]}"

      if [[ ! ${?} ]]; then
        cecho 'red' 'Failure.'
        return 1
      fi
      ;;
    'ogg' | 'vorbis' )

      if [[ "${verbose}" = 'True' ]]; then
        vorbisgain --album --fast "${album_files[@]}"
      else
        vorbisgain --album --fast --quiet "${album_files[@]}"
      fi

      if [[ ! ${?} ]]; then
        cecho 'red' 'Failure.'
        return 1
      fi
      ;;
    * )
      # unsupported format.
      return 1
      ;;
  esac

  cecho 'green' 'Done.'

  return 0
} #replaygain_album()
export -f 'replaygain_album'



# Delete files in output album when source is not found in input album.
#
# @param string $input_album_path The input album path.
# @param string $input_path The input library path.
# @param string $output_path The output library path.
# @param string $lock_dir The mussync lock path.
function sync_delete_album()
{
  [[ ${#} -ne 4 ]] && exit 1

  local input_album_path="${1}"
  local input_path="${2}"
  local output_path="${3}"
  local lock_dir="${4}"

  ## Build output album path based on input album path.
  local output_album_path="$(echo -n "${input_album_path}" \
        | sed -e "s|^${input_path}|${output_path}|")"

  if [[ -d "${output_album_path}" ]]; then
    find "${output_album_path}" -maxdepth 1 -type 'f' -print0 \
      | grep --null-data -v "${lock_dir}" \
      | while read -r -d '' 'output_file'; do

      ## Build input file path based on output file path.
      local output_file_path="$(dirname "${output_file}")"
      local input_file_path="$(echo -n "${output_file_path}" | sed -e "s|^${output_path}|${input_path}|")"
      local short_path="$(echo -n "${output_file_path}" | sed -e "s|^${output_path}||")"

      local output_filename="$(basename "${output_file}")"
      local input_filename_base="$(echo -n "${output_filename}" | sed -e "s/\.[^\.]*$//")"

      local short_input_file_base="${input_filename_base}.*"
      local short_output_file="${output_filename}"

      # Test for file with same name (or without extension).
      if [[ ! -e "${input_file_path}/${output_filename}" ]]; then
        local input_file="$(find "${input_file_path}" -maxdepth 1 -type 'f' -iname "${input_filename_base}.*")"
        local short_input_file="$(basename "${input_file}")"
        if [[ -z "${input_file}"  ]]; then
          # Input file not found. Removing output file.
          echo -n '   - Input file '
          cecho 'magenta' -n "${short_input_file_base}"
          echo ' disappeared.'

          echo -n '     + Removing output file '
          cecho 'magenta' -n "${short_output_file}"
          echo -n '... '

          [[ -e "${output_file}" ]] && rm "${output_file}"

          if [[ -e "${output_file}" ]]; then
            cecho 'red' "Failed."
          else
            cecho 'green' "Done."
          fi
        fi

      fi
    done
  fi

  return 0
} # sync_delete_album()
export -f 'sync_delete_album'



# Convert an music album from input library to output library.
#
# @param string $threads The threads option for parallel.
# @param string $replaygain True to apply album replay gain to converted files.
# @param string $sync_delete True to delete files witch source is deleted from input album.
# @param string $lock_dir The mussync lock path.
# @param string $input_album_path The album path in input library.
#
# @return Exit with error if conversion failed.
function convert_album() {
  [[ ${#} -ne 5 ]] && exit 1

  # Enable the trapped errors to be passed to called functions.
  #set -o errtrace

  local threads="${1}"
  local replaygain="${2}"
  local sync_delete="${3}"
  local lock_dir="${4}"
  local input_album_path="${5}"

  local album_name="$(basename "${input_album_path}")"
  local short_album_path="$(echo -n "${input_album_path}" | sed -e "s|^${input_path}/||")"

  #------------------------
  # Trap handling function
  #
  # @param string $input_album_path The currently processed path.
  function exit_convert_album_on_signal() {
    local interrupt=${?}

    local input_album_path="${1}"
    local album_name="$(basename "${input_album_path}")"

    cecho 'boldred' "Convertion of album '${album_name}' interrupted." >&2

    local running_jobs=($(jobs -p))
    if [[ -n "${running_jobs}" ]]; then
      # cecho 'yellow' " -> Stopping conversion jobs (${running_jobs[@]})." >&2
      kill ${running_jobs[@]} 2>'/dev/null'
    fi

    if [[ ${interrupt} -eq 2 ]]; then
      # killing self if catched a SIGINT.
      # see http://mywiki.wooledge.org/SignalTrap
      trap - SIGINT
      kill -INT $$
    else
      exit 3
    fi
  } # exitconvert_album__on_signal()
  #------------------------

  trap "exit_convert_album_on_signal '${input_album_path}'" SIGHUP SIGINT SIGQUIT SIGKILL SIGTERM

  # Find folder files and put them in a array.
  # See: http://mywiki.wooledge.org/BashFAQ/020
  unset files
  declare -a files
  while read -d '' -r; do
    files+=("${REPLY}")
  done < <(find "${input_album_path}" -maxdepth 1 -type 'f' -print0 \
              | sort --zero-terminated)

  # see : http://mywiki.wooledge.org/UsingFind
  # Note to self: when -print0 option is not available.
  # (find "${input_album_path}" -maxdepth 1 -type 'f' -exec printf "%s\0" {} \;)

  # Test if folder has files.
  if [[ ${#files[@]} -gt 0 ]]; then
    cecho 'bold' -n ' * Processing folder '
    cecho 'magentabold' -n "${short_album_path}"
    cecho 'bold' '...'

    # Delete files not matched in input library if option selected.
    # We do clean up before generating new files.
    if [[ "${sync_delete}" = 'True' ]]; then
      sync_delete_album "${input_album_path}" "${input_path}" "${output_path}" "${lock_dir}"
    fi

    # See http://mywiki.wooledge.org/ProcessManagement#I_want_to_process_a_bunch_of_files_in_parallel.2C_and_when_one_finishes.2C_I_want_to_start_the_next._And_I_want_to_make_sure_there_are_exactly_5_jobs_running_at_a_time.
    parallel --halt 2 --jobs "${threads}" --null 'convert_file' ::: "${files[@]}"

    # Warning: when interrupted, parallel does not print threads output
    # (including the traps output).
    # use --res /path/to/folder to store and debug tasks outputs.

    # Wait for all files to be done.
    parallel --wait

    # Compute album replaygain.
    if [[ "${replaygain}" = 'True' ]]; then
      replaygain_album "${output_format}" "${output_extension}" \
                      "${verbose}" "${input_album_path}"

      local return_code=${?}
      if [[ ${return_code} = 139 ]]; then
        # replaygain_album encountered a segfault.
        # Need another path to regenerated deleted faulty files.

        convert_album "${threads}" "${replaygain}" 'False' "${lock_dir}" "${input_album_path}"
      fi
    fi

  fi

  return 0
} # convert_album()
export -f 'convert_album'



#######################################################################################
#######################################################################################
#######################################################################################
# Include from http://wiki.grzegorz.wierzowiecki.pl/code:mutex-in-bash
#######################################################################################
#######################################################################################
#######################################################################################
# Function called by trap. Perform exit cleanup
# use to enable trap "exit_on_signal '${lock_path}'" SIGHUP SIGINT SIGQUIT SIGKILL SIGTERM
#
# @param string $lock_path The path to lock file.
function exit_on_signal() {
  local interrupt=${?}

  local lock_path="${1}"
  cecho 'boldred' "${script_name} is stopping at your request." >&2

  local running_jobs=($(jobs -p))
  if [[ -n "${running_jobs}" ]]; then
    #cecho 'yellow' " -> Stopping conversion jobs (${running_jobs[@]})." >&2
    kill ${running_jobs[@]} 2>'/dev/null'
  fi
  # remove lock file.
  [[ -n "${lock_path}" && -d "${lock_path}" ]] && rm -rf "${lock_path}"

  if [[ ${interrupt} -eq 2 ]]; then
    # killing self if catched a SIGINT.
    # see http://mywiki.wooledge.org/SignalTrap
    trap - SIGINT
    kill -INT $$
  else
    exit 3
  fi
} # exit_on_signal()


# lock dirs/files
lock_dir=".${script_name}.lock"
pid_file="${script_name}.pid"

# exit codes and text for them - additional features nobody needs :-)
ENO_SUCCESS=0; ETXT[0]="ENO_SUCCESS"
ENO_GENERAL=1; ETXT[1]="ENO_GENERAL"
ENO_LOCKFAIL=2; ETXT[2]="ENO_LOCKFAIL"
ENO_RECVSIG=3; ETXT[3]="ENO_RECVSIG"

base_lock_path="/var/lock"
lock_path="${base_lock_path}/${lock_dir}"

# Lock the system.
#
# @param string $base_lock_path Optionnal custom path to lock file.
#                               Default to /var/lock.
# 
# @return unlock (rm) error code.
function lock {
    if [[ -n "${1}" ]]; then
      realpath_check "${1}"
      base_lock_path="${realpath}"
    fi

    lock_path="${base_lock_path}/${lock_dir}"
    local pid_path="${lock_path}/${pid_file}"

    if mkdir "${lock_path}" &>'/dev/null'; then
        # lock succeeded, store the PID
        echo "$$" >"${pid_path}"

        # the following handler will exit the script on receiving these signals
        # the trap on "0" (EXIT) from above will be triggered by this trap's
        # "exit" command!
        trap "exit_on_signal '${lock_path}'" SIGHUP SIGINT SIGQUIT SIGKILL SIGTERM

        return ${ENO_SUCCESS}
    else
        # lock failed, now check if the other PID is alive
        other_pid="$(cat "${pid_path}" 2>'/dev/null')"

        # if cat wasn't able to read the file anymore, another instance probably is
        # about to remove the lock -- exit, we're *still* locked
        # Thanks to Grzegorz Wierzowiecki for pointing this race condition out on
        # http://wiki.grzegorz.wierzowiecki.pl/code:mutex-in-bash
        if [[ ${?} != 0 ]]; then
            # Pid file does not exists - probably directory is beeing deleted
            exit ${ENO_LOCKFAIL}
        fi

        if ! kill -0 ${other_pid} &>'/dev/null'; then
            # lock is stale, remove it and restart
            unlock
            lock "${base_lock_path}"
            return $?
        else
            # lock is valid and OTHERPID is active - exit, we're locked!
            echo "lock failed, PID ${other_pid} is active" >&2
            exit ${ENO_LOCKFAIL}
        fi
    fi
    return 0
} # lock()

# Unlock the system.
# 
# @return unlock (rm) error code.
function unlock {
    [[ -d "${lock_path}" ]] && rm -r "${lock_path}" &>'/dev/null'
    return $?
} # unlock()

#######################################################################################
#######################################################################################
#######################################################################################
# Include from /usr/share/doc/bash-doc/examples/functions/getoptx.bash of package bash-doc.
#######################################################################################
#######################################################################################
#######################################################################################
function getoptex()
{
  let $# || return 1
  local optlist="${1#;}"
  let optind || optind=1
  [[ $optind -lt $# ]] || return 1
  shift $optind
  if [[ "$1" != "-" && "$1" != "${1#-}" ]]; then
    optind=$((optind+1));
    if [[ "$1" != "--" ]]; then
      local o
      o="-${1#-$optofs}"
      for opt in ${optlist#;}
      do
        optopt="${opt%[;.:]}"
        unset optarg
        local opttype="${opt##*[^;:.]}"
        [[ -z "$opttype" ]] && opttype=";"
        if [[ ${#optopt} -gt 1 ]]; then # long-named option
          case $o in
            "--$optopt")
              if [[ "$opttype" != ":" ]]; then
                return 0;
              fi
              optarg="$2"
              if [[ -z "$optarg" ]]; then # error: must have an agrument
                let OPTERR && echo "$0: error: $optopt must have an argument" >&2
                optarg="$optopt";
                optopt="?"
                return 1;
              fi
              optind=$((optind+1)) # skip option's argument
              return 0
            ;;
            "--$optopt="*)
              if [[ "$opttype" = ";" ]]; then  # error: must not have arguments
                let OPTERR && echo "$0: error: $optopt must not have arguments" >&2
                optarg="$optopt"
                optopt="?"
                return 1
              fi
              optarg=${o#"--$optopt="}
              return 0
            ;;
          esac
        else # short-named option
          case "$o" in
            "-$optopt")
              unset optofs
              [[ "$opttype" != ":" ]] && return 0
              optarg="$2"
              if [[ -z "$optarg" ]]; then
                echo "$0: error: -$optopt must have an argument" >&2
                optarg="$optopt"
                optopt="?"
                return 1
              fi
              optind=$((optind+1)) # skip option's argument
              return 0
            ;;
            "-$optopt"*)
              if [[ $opttype = ";" ]]; then # an option with no argument is in a chain of options
                optofs="$optofs?" # move to the next option in the chain
                optind=$((optind-1)) # the chain still has other options
                return 0
              else
                unset optofs
                optarg="${o#-$optopt}"
                return 0
              fi
            ;;
          esac
        fi
      done
      echo "Error : invalid option : '${o}'." >&2
      usage
      exit 1
    fi
  fi
  optopt="?"
  unset optarg
  return 1
}
function optlistex
{
  local l="$1"
  local m # mask
  local r # to store result
  while [[ ${#m} -lt $[${#l}-1] ]]; do m="$m?"; done # create a "???..." mask
  while [[ -n "$l" ]]; do
    r="${r:+"$r "}${l%$m}" # append the first character of $l to $r
    l="${l#?}" # cut the first charecter from $l
    m="${m#?}"  # cut one "?" sign from m
    if [[ -n "${l%%[^:.;]*}" ]]; then # a special character (";", ".", or ":") was found
      r="$r${l%$m}" # append it to $r
      l="${l#?}" # cut the special character from l
      m="${m#?}"  # cut one more "?" sign
    fi
  done
  echo $r
}
function getopt()
{
  local optlist=`optlistex "$1"`
  shift
  getoptex "$optlist" "$@"
  return $?
}
#######################################################################################
#######################################################################################
#######################################################################################

# Check for binaries presence
check_binary "basename" "coreutils"
check_binary "dirname" "coreutils"
check_binary "mktemp" "mktemp"
check_binary "sed" "sed"
check_binary "avconv;ffmpeg" "libav-tools"
check_binary "parallel" "parallel"
check_binary "eyeD3;eyeD3-2.7;eyeD3-2.6" "eyed3"
check_binary "mediainfo" "mediainfo"
check_binary "vorbiscomment" "vorbis-tools"
check_binary "metaflac" "flac"
check_binary "mp3gain;aacgain" "mp3gain"
check_binary "vorbisgain" "vorbisgain"

# Application defaults

# Export configuration for convert_file function.
export input_path=""
export output_path=""

export input_format="*"
export output_format="mp3"

export encoding_mode="VBR"
export encoding_bitrate="192k"
export encoding_quality="5"

replaygain="false"

threads="100%"

export avconv_options=""

export sync_delete='False'
export copy_all='False'

export quiet="False"
export verbose="False"

export input_extension="${input_format}"
export output_extension="${output_format}"

# Parse options using getoptex from /usr/share/doc/bash-doc/examples/functions/getoptx.bash
while getoptex "help h input-path: in: i: output-path: out: o: input-format: if: output-format: of: e: bitrate. b. quality. q. threads: t: avconv-options: a: replaygain gain g sync-delete delete d copy-all copy c quiet silent s verbose v" "${@}"; do
  # Options debuging.
  # echo "Option <$optopt> ${optarg:+has an arg <$optarg>}"

  case "${optopt}" in
    'input-path' | 'in' | 'i' )
      realpath_check "${optarg}"
      input_path="${realpath}"

      if [[ -z "${output_path}" ]]; then
        output_path="${input_path}"
      fi
      ;;

    'output-path' | 'out' | 'o' )
      realpath_check "${optarg}"
      output_path="${realpath}"
      ;;

    'input-format' | 'if' )
      if [[ -n "${optarg}" ]]; then
        input_format="${optarg}"
      fi
      ;;

    'output-format' | 'of' | 'e' )
      if [[ -n "${optarg}" ]]; then
        output_format="${optarg}"
      fi
      ;;

    'bitrate' | 'b' )
      encoding_mode="CBR"

      if [[ -n "${optarg}" ]]; then
        encoding_bitrate="${optarg}"
      fi
      ;;

    'quality' | 'q' )
      encoding_mode="VBR"

      if [[ -n "${optarg}" ]]; then
        encoding_quality="${optarg}"
      fi
      ;;

    'replaygain' | 'gain' | 'g' )
      replaygain='True'
      ;;

    'threads' | 't' )
      if [[ -n "${optarg}" ]]; then
        threads="${optarg}"
      fi
      ;;

    'avconv-options' | 'a' )
      if [[ -n "${optarg}" ]]; then
        avconv_options="${optarg}"
      fi
      ;;

    'sync-delete' | 'delete' | 'd' )
      sync_delete='True'
      ;;

    'copy-all' | 'copy' | 'c' )
      copy_all='True'
      ;;

    'quiet' | 'silent' | 's' )
      quiet='True'
      ;;

    'verbose' | 'v' )
      verbose='True'
      ;;

    'help' | 'h' | * )
      usage 0
      ;;
  esac
done

shift $((optind-1))

if [[ -z "${input_path}" ]]; then
  cecho 'redbold' 'Error: no input path provided.' >&2
  usage 1
fi

if [[ "${verbose}" = 'True' ]]; then
  quiet='False'
fi

# Render formats with lowercase.
input_format="$(tr '[:upper:]' '[:lower:]' <<< "${input_format}")"
output_format="$(tr '[:upper:]' '[:lower:]' <<< "${output_format}")"


# TODO : implement a less basic extension detection based on format.

export input_extension="${input_format}"
case "${input_format}" in
  'vorbis' | 'ogg' )
    input_format='vorbis'
    input_extension='ogg'
    ;;
esac

export output_extension="${output_format}"
case "${output_format}" in
  'flac' | 'aiff' )
    # Defaults are good.
    ;;
  'mp3' )
    # Invert quality setting (9 is lowest, 0 highest).
    # This way mp3 and ogg/vorbis quality is set the same way.
    encoding_quality=$((9 - ${encoding_quality}))
    ;;
  'ogg' | 'vorbis' )
    output_extension='ogg'
    output_format='vorbis'
    ;;
  * )
    echo "Error: unsupported output format '${output_format}'." >&2
    exit 1
esac

## Lock output path for this script.
lock "${output_path}"

###############################
#
# Convert input files to output format.
#
################################

# Enable the trapped errors to be passed to called functions.
#set -o errtrace

# Process albums (aka. folders) in input library.
if [[ "${quiet}" = 'True' ]]; then
  find "${input_path}" -type 'd' \
    -exec bash -c 'convert_album "${@}"' _ "${threads}" "${replaygain}" "${sync_delete}" "${lock_dir}" {} \; > '/dev/null'
else
  find "${input_path}" -type 'd' \
    -exec bash -c 'convert_album "${@}"' _ "${threads}" "${replaygain}" "${sync_delete}" "${lock_dir}" {} \;
fi

unlock
exit 0
