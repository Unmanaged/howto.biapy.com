#!/bin/bash
#
# PHP Tools.
#
# For suggestion and bug reports, please contact
# Pierre-Yves Landur√© <pierre-yves dot landure at biapy dot fr>
#
version="1.1.1"

# History
# -------
#
# 1.1.1:
#  - fix bad var name in PHP 7.0 config path detection.
#
# 1.1.0:
#  - add compatibility for Ubuntu 16.04 Xenial Xerus PHP 7.0.
#  - add compatibility for Debian 8.0 Jessie php5enmod
#

# Get the basename of a path (multi-plateform version)
# Print the result on &1 if found.
#
# @param string $path A path.
#
# @return A return code..
function basename() {

  [[ ${#} -eq 0 ]] && exit 1

  case "$(uname)" in
    'Linux' )
      command basename -z -- "${@}"
      ;;
    'Darwin' | * )
      command basename -- "${@}"
      ;;
  esac

  return ${?}
} # basename()



script_name="$(basename "${0}")"



# Print this script help.
function usage {

  echo "PHP Tools v${version}
This tool ease PHP5 ini configuration from line.
All ini configurations changed by this tool are in
/etc/php5/conf.d/zzz-php-tools.ini

Usage :

  ${script_name} [ --analyze 'ini-config-rule' ]
      [ --set 'init-config-rule' 'value' ]
      [ --fix 'init-config-rule' 'value' ]
      [ --get 'init-config-rule' ]
      [ --for='software name' ]

  Available options are :
    * --for | -f      : Set a comment telling which software the
                        value set is for.

  Available actions are :
    * --help | -h     : Display this message.
    * --analyse | -a  : List files where the config rule is set,
                        and display its current value.
    * --set | -s      : Set config rule value if current value is lower.
    * --fix | -f      : Set config rule value wathever the current value is.
    * --get | -g      : Get config rule value.
"

  [[ -n "${1}" ]] && exit ${1}
} # usage



# Echo text in color.
#
# Colors definitions.
# See http://mywiki.wooledge.org/BashFAQ/037
#
# @param string $color Color and weight for text. (boldgreen for example).
# @param string $text The text to echo (and echo options).
function cecho() {
  if [[ ${#} -lt 2 ]]; then
    echo "${@}"
    return 0
  fi

  local color="${1}"

  # remove color information from arguments.
  shift 1

  # Check that the output is to a terminal.
  if [[ ! -t 1 ]]; then
    # Not outputing to a terminal, discaring colors.
    echo "${@}"
    return 0
  fi

  # Bash 4 version with associative array.
  ## Color and weight definitions.
  #declare -A font
  #font['black']="$(tput 'setaf' 0)"
  #font['red']="$(tput 'setaf' 1)"
  #font['green']="$(tput 'setaf' 2)"
  #font['yellow']="$(tput 'setaf' 3)"
  #font['blue']="$(tput 'setaf' 4)"
  #font['magenta']="$(tput 'setaf' 5)"
  #font['cyan']="$(tput 'setaf' 6)"
  #font['white']="$(tput 'setaf' 7)"

  #font['bgBlack']="$(tput 'setab' 0)"
  #font['bgRed']="$(tput 'setab' 1)"
  #font['bgGreen']="$(tput 'setab' 2)"
  #font['bgYellow']="$(tput 'setab' 3)"
  #font['bgBlue']="$(tput 'setab' 4)"
  #font['bgMagenta']="$(tput 'setab' 5)"
  #font['bgCyan']="$(tput 'setab' 6)"
  #font['bgWhite']="$(tput 'setab' 7)"

  #font['bold']="$(tput 'bold')"
  #font['stout']="$(tput 'smso')" # Standout.
  #font['under']="$(tput 'smul')" # Underline.
  #font['blink']="$(tput 'blink')" # Blinking
  #font['italic']="$(tput 'sitm')"

  ## Parse the color string.
  #for key in "${!font[@]}"; do
  #  [[ "${color}" = *"${key}"* ]] && echo -n "${font[${key}]}"
  #done

  declare -a fontIndex
  declare -a fontValue

  local index=0
  fontIndex[$index]='black';     fontValue[$index]="$(tput 'setaf' 0)"; ((index++))
  fontIndex[$index]='red';       fontValue[$index]="$(tput 'setaf' 1)"; ((index++))
  fontIndex[$index]='green';     fontValue[$index]="$(tput 'setaf' 2)"; ((index++))
  fontIndex[$index]='yellow';    fontValue[$index]="$(tput 'setaf' 3)"; ((index++))
  fontIndex[$index]='blue';      fontValue[$index]="$(tput 'setaf' 4)"; ((index++))
  fontIndex[$index]='magenta';   fontValue[$index]="$(tput 'setaf' 5)"; ((index++))
  fontIndex[$index]='cyan';      fontValue[$index]="$(tput 'setaf' 6)"; ((index++))
  fontIndex[$index]='white';     fontValue[$index]="$(tput 'setaf' 7)"; ((index++))

  fontIndex[$index]='bgBlack';   fontValue[$index]="$(tput 'setab' 0)"; ((index++))
  fontIndex[$index]='bgRed';     fontValue[$index]="$(tput 'setab' 1)"; ((index++))
  fontIndex[$index]='bgGreen';   fontValue[$index]="$(tput 'setab' 2)"; ((index++))
  fontIndex[$index]='bgYellow';  fontValue[$index]="$(tput 'setab' 3)"; ((index++))
  fontIndex[$index]='bgBlue';    fontValue[$index]="$(tput 'setab' 4)"; ((index++))
  fontIndex[$index]='bgMagenta'; fontValue[$index]="$(tput 'setab' 5)"; ((index++))
  fontIndex[$index]='bgCyan';    fontValue[$index]="$(tput 'setab' 6)"; ((index++))
  fontIndex[$index]='bgWhite';   fontValue[$index]="$(tput 'setab' 7)"; ((index++))

  fontIndex[$index]='bold';      fontValue[$index]="$(tput 'bold')"; ((index++))
  fontIndex[$index]='stout';     fontValue[$index]="$(tput 'smso')"; ((index++)) # Standout.
  fontIndex[$index]='under';     fontValue[$index]="$(tput 'smul')"; ((index++)) # Underline.
  fontIndex[$index]='blink';     fontValue[$index]="$(tput 'blink')"; ((index++)) # Blinking.
  fontIndex[$index]='italic';    fontValue[$index]="$(tput 'sitm')"; ((index++))

  for key in "${!fontIndex[@]}"; do
    [[ "${color}" = *"${fontIndex[${key}]}"* ]] && echo -n "${fontValue[${key}]}"
  done

  # Output the text.
  echo "${@}"

  # Reset all attributes.
  tput 'sgr0'

  return 0
} # cecho()



# Get the absolute path for a file or directory.
# Print its path on &1 if found.
#
# @param string $path A relative path.
#
# @return ${realpath} A absolute path.
function realpath() {
  [[ ${#} -ne 1 ]] && exit 1

  local realpath=''

  case "$(uname)" in
    'Linux' )
      realpath="$(readlink -f "${1}")"
      ;;
    'Darwin' )
      realpath="$(stat -f '%N' "${1}")"
      ;;
    * )
      realpath="$(realpath "${1}")"
      ;;
  esac

  echo -n "${realpath}"
  return 0
} # realpath



# Get the absolute path for a file or directory and check the file existance.
# If the file does not exists, display an error message and exit the script.
# Print its path on &1 if found.
#
# @param string $path A relative path.
#
# @return Exit with error if the path is missing.
function realpath_check() {
  [[ ${#} -ne 1 ]] && exit 1

  local realpath="$(realpath "${1}")"

  if [[ -n "${realpath}" && ! -e "${realpath}" ]]; then
    realpath=''
  fi

  if [[ -z "${realpath}" ]]; then
    cecho 'redbold' "Error: File '${1}' does not exists." >&2
    exit 1
  fi

  echo -n "${realpath}"
  return 0
} # realpath_check



# Check if a binary is present. Print its path on &1 if found.
#
# @param string $binary The binaries to check, separated by ;.
# @param string $package The package the binary come from.
#
# @return Exit with error if the binary is missing.
function check_binary() {
  [[ ${#} -ne 2 ]] && exit 1

  local primary="$(cut -d ';' -f 1 <<< "${1}")"
  local binaries="";
  local binary=''

  read -d ';' -r -a binaries <<< "${1}"

  # Test the binary presence.
  for binary in ${binaries[@]}; do
    if type "${binary}" &>'/dev/null'; then
      command -v "${binary}"
      return 0
    fi
  done

  cecho 'redbold' "Error: '${primary}' is missing. Please install package '${2}'." >&2
  exit 1
} # check_binary()



# Get decimal representation of a value.
#
# @param string $value The ini value.
#
# @return string The ini value as integer.
function parse_value() {
  test ${#} -ne 1 && exit 1

  value="${1}"

  integer_value="$(sed -e 's/^\([0-9]*\)[^0-9]\{0,1\}.*$/\1/' <<< "${value}")"
  unit="$(echo -n "${value}" | sed -e 's/^[0-9]*\([^0-9]*\)$/\1/' | tr '[:upper:]' '[:lower:]')"

  result=""
  if [ -z "${integer_value}" ]; then
    case "${unit}" in
      'true' | 'on' | 'yes' | 'y' )
        result="1"
        ;;

      'false' | 'off' | 'no' | 'n' | * )
        result="0"
        ;;
    esac
  else
    case "${unit}" in
      'g' | 'gb' )
        result=$(( ${integer_value} * 1024 * 1024 * 1024 ))
        ;;
      'm' | 'mb' )
        result=$(( ${integer_value} * 1024 * 1024 ))
        ;;
      'k' | 'kb' )
        result=$(( ${integer_value} * 1024 ))
        ;;
      * )
        result="${integer_value}"
    esac
  fi

  echo "${result}"
} # parse_value



#######################################################################################
#######################################################################################
#######################################################################################
# Include from /usr/share/doc/bash-doc/examples/functions/getoptx.bash of package bash-doc.
#######################################################################################
#######################################################################################
#######################################################################################
function getoptex() {
  let $# || return 1
  local optlist="${1#;}"
  let optind || optind=1
  [[ $optind -lt $# ]] || return 1
  shift $optind
  if [[ "$1" != "-" && "$1" != "${1#-}" ]]; then
    optind=$((optind+1));
    if [[ "$1" != "--" ]]; then
      local o
      o="-${1#-$optofs}"
      for opt in ${optlist#;}
      do
        optopt="${opt%[;.:]}"
        unset optarg
        local opttype="${opt##*[^;:.]}"
        [[ -z "$opttype" ]] && opttype=";"
        if [[ ${#optopt} -gt 1 ]]; then # long-named option
          case $o in
            "--$optopt")
              if [[ "$opttype" != ":" ]]; then
                return 0;
              fi
              optarg="$2"
              if [[ -z "$optarg" ]]; then # error: must have an agrument
                let OPTERR && echo "$0: error: $optopt must have an argument" >&2
                optarg="$optopt";
                optopt="?"
                return 1;
              fi
              optind=$((optind+1)) # skip option's argument
              return 0
            ;;
            "--$optopt="*)
              if [[ "$opttype" = ";" ]]; then  # error: must not have arguments
                let OPTERR && echo "$0: error: $optopt must not have arguments" >&2
                optarg="$optopt"
                optopt="?"
                return 1
              fi
              optarg=${o#"--$optopt="}
              return 0
            ;;
          esac
        else # short-named option
          case "$o" in
            "-$optopt")
              unset optofs
              [[ "$opttype" != ":" ]] && return 0
              optarg="$2"
              if [[ -z "$optarg" ]]; then
                echo "$0: error: -$optopt must have an argument" >&2
                optarg="$optopt"
                optopt="?"
                return 1
              fi
              optind=$((optind+1)) # skip option's argument
              return 0
            ;;
            "-$optopt"*)
              if [[ $opttype = ";" ]]; then # an option with no argument is in a chain of options
                optofs="$optofs?" # move to the next option in the chain
                optind=$((optind-1)) # the chain still has other options
                return 0
              else
                unset optofs
                optarg="${o#-$optopt}"
                return 0
              fi
            ;;
          esac
        fi
      done
      cecho 'redbold' "Error : invalid option : '${o}'." >&2
      usage
      exit 1
    fi
  fi
  optopt="?"
  unset optarg
  return 1
}
function optlistex() {
  local l="$1"
  local m # mask
  local r # to store result
  while [[ ${#m} -lt $[${#l}-1] ]]; do m="$m?"; done # create a "???..." mask
  while [[ -n "$l" ]]; do
    r="${r:+"$r "}${l%$m}" # append the first character of $l to $r
    l="${l#?}" # cut the first charecter from $l
    m="${m#?}"  # cut one "?" sign from m
    if [[ -n "${l%%[^:.;]*}" ]]; then # a special character (";", ".", or ":") was found
      r="$r${l%$m}" # append it to $r
      l="${l#?}" # cut the special character from l
      m="${m#?}"  # cut one more "?" sign
    fi
  done
  echo $r
}
function getopt() {
  local optlist=`optlistex "$1"`
  shift
  getoptex "$optlist" "$@"
  return $?
}
#######################################################################################
#######################################################################################
#######################################################################################


# Check for binaries presence
check_binary "basename" "coreutils" > '/dev/null'
check_binary "dirname" "coreutils" > '/dev/null'
check_binary "mktemp" "mktemp" > '/dev/null'
check_binary "sed" "sed" > '/dev/null'
check_binary "php" "php5-cli" > '/dev/null'


# Application defaults
for="false"
action="false"
ini_rule="false"
value=""

php_base="/etc/php5"
php_config_d="${php_base}/conf.d"
test -d '/etc/php5/mods-available' \
  && php_config_d='/etc/php5/mods-available'
test -d '/etc/php/7.0/mods-available' \
  && php_config_d='/etc/php/7.0/mods-available'
php_config_name="zzz-php-tools"
php_config_file="${php_config_d}/${php_config_name}.ini"

[[ -x '/usr/sbin/php5enmod' ]] && phpEnMod="php5enmod"
[[ -x '/usr/sbin/phpenmod' ]] && phpEnMod="phpenmod"

priority=99
php_config_file_template="; Enable APC ressources sharing.
; priority=${priority}
"

# Parse options using getoptex from /usr/share/doc/bash-doc/examples/functions/getoptx.bash
while getoptex "help h for: f: analyze: a: set: s: fix: f: get: g:" "${@}"; do
  # Options debuging.
  # echo "Option <$optopt> ${optarg:+has an arg <$optarg>}"

  case "${optopt}" in
    'set' | 's' )
      action='set'
      ini_rule="${optarg}"
      ;;

    'fix' | 'f' )
      action='fix'
      ini_rule="${optarg}"
      ;;

    'get' | 'g' )
      action='get'
      ini_rule="${optarg}"
      ;;

    'analyze' | 'a' )
      action='analyze'
      ini_rule="${optarg}"
      ;;

    'for' | 'f' )
      for="${optarg}"
      ;;

    'help' | 'h' | * )
      usage 0
      ;;
  esac
done

shift $((optind-1))

if [[ "${action}" = 'false' ]]; then
  cecho 'redbold' 'Error: no action specified.' >&2
  usage 1
fi

# Check that ini_rule exists.
if [[ -n "$(php --run "echo (ini_get('${ini_rule}') === false) ? 'error':'';")" ]]; then
  cecho 'redbold' "Error: '${ini_rule}' is not a valid PHP configuration option." >&2
  exit 1
fi


case "${action}" in
  'analyze' )
    echo "Analysing '${ini_rule}' settings
============================================================="

    first=1
    find "${php_base}" -name "php.ini" \
      | grep -v "${php_config_d}" \
      | sort \
      | xargs -ifile egrep --with-filename "^[\t ]*${ini_rule}[\t ]*=" "file" \
      | while read line; do
      if [ ${first} -eq 1 ]; then
        echo "Base PHP ini files
-------------------------------------------------------------"
        first=0
      fi
      file="$(cut --delimiter=":" --fields=1 <<< "${line}")"
      rule="$(cut --delimiter=":" --fields=2- <<< "${line}")"
      value="$(sed -e 's/^[^=]*=[ \t]*//' -e 's/;.*$//' <<< "${rule}")"
      printf "%-60s: %s\n" "${file}" "${value}"
    done
    first=1
    find "${php_config_d}" -name "*.ini" \
      | sort \
      | xargs -ifile egrep --with-filename "^[\t ]*${ini_rule}[\t ]*=" "file" \
      | while read line; do
      if [ ${first} -eq 1 ]; then
        echo "
conf.d ini files
-------------------------------------------------------------"
        first=0
      fi
      file="$(cut --delimiter=":" --fields=1 <<< "${line}")"
      rule="$(cut --delimiter=":" --fields=2- <<< "${line}")"
      value="$(sed -e 's/^[^=]*=[ \t]*//' -e 's/;.*$//' <<< "${rule}")"
      printf "%-60s: %s\n" "${file}" "${value}"
    done

    echo "
============================================================="
    printf "%-60s: %s\n" "Current '${ini_rule}' value" "$(php --run "echo ini_get('${ini_rule}');")"
    exit 0
    ;;



  'get' )
    php --run "echo ini_get('${ini_rule}');"
    echo
    exit 0
    ;;



  'set' )
    value="${1}"

    # Create configuration file if necessary:
    if [[ ! -e "${php_config_file}" ]]; then
      echo "${php_config_file_template}" > "${php_config_file}"
      [[ -n "${phpEnMod}" ]] && ${phpEnMod} "${php_config_name}/${priority}"
    fi

    current_value="$(php --run "echo ini_get('${ini_rule}');")"

    parsed_value="$(parse_value "${value}")"
    parsed_current_value="$(parse_value "${current_value}")"

    if [ "${parsed_value}" -gt "${parsed_current_value}" ]; then
      # Update the current value to use the new value.
      set_done="false"
      if [ -n "$(egrep "^[\t ]*${ini_rule}[\t ]*=" "${php_config_file}")" ]; then
        sed -i -e "s;^[\t ]*${ini_rule}[\t ]*=.*$;${ini_rule} = ${value};" \
            "${php_config_file}"
        set_done="true"
      fi

      # add new setting to configuration file if necessary.
      if [ "${set_done}" = "false" ]; then
        echo "
; === ${ini_rule} ===
${ini_rule} = ${value}" \
          >> "${php_config_file}"
        set_done="true"
      fi
    else
      # Set current value in ini file if it does not exists yet.
      if [ -z "$(egrep "^[\t ]*${ini_rule}[\t ]*=" "${php_config_file}")" ]; then
        echo "
; === ${ini_rule} ===
${ini_rule} = ${current_value}" \
          >> "${php_config_file}"
      fi
    fi

    # Add the "for" information as comment.
    if [ "${for}" != "false" -a -n "${for}" ]; then
      for_text="; - for '${for}' : ${value}"
      if [ -z "$(sed -e "0,/; === ${ini_rule} ===/d" \
                  -e "/^[\t ]*${ini_rule}[\t ]*/,10000d" \
                  "${php_config_file}" \
                | grep "${for_text}")" ]; then
        sed -i -e "/^[\t ]*${ini_rule}[\t ]*=/i\\
${for_text}" \
          "${php_config_file}"
      fi
    fi

    if [ "${set_done}" = "true" ]; then
      echo "'${ini_rule}' is set to '${value}'."
    fi
    exit 0;

    ;;



  'fix' )
    value="${1}"

    set_done="false"

    # Create configuration file if necessary:
    if [[ ! -e "${php_config_file}" ]]; then
      echo "${php_config_file_template}" > "${php_config_file}"
      [[ -n "${phpEnMod}" ]] && ${phpEnMod} "${php_config_name}/${priority}"
    fi

    # update existing setting if possible.
    if [ -n "$(egrep "^[\t ]*${ini_rule}[\t ]*=" "${php_config_file}")" ]; then
      sed -i -e "s;^[\t ]*${ini_rule}[\t ]*=.*$;${ini_rule} = ${value};" \
          "${php_config_file}"
      set_done="true"
    fi

    # add new setting to configuration file if necessary.
    if [ "${set_done}" = "false" ]; then
      echo "
; === ${ini_rule} ===
${ini_rule} = ${value}" \
        >> "${php_config_file}"
      set_done="true"
    fi

    # Add the "for" information as comment.
    if [ "${for}" != "false" -a -n "${for}" ]; then
      for_text="; - for '${for}' : ${value}"
      if [ -z "$(sed -e "0,/; === ${ini_rule} ===/d" \
                  -e "/^[\t ]*${ini_rule}[\t ]*/,10000d" \
                  "${php_config_file}" \
                | grep "${for_text}")" ]; then
        sed -i -e "/^[\t ]*${ini_rule}[\t ]*=/i\\
${for_text}" \
          "${php_config_file}"
      fi
    fi

    if [ "${set_done}" = "true" ]; then
      echo "'${ini_rule}' is set to '${value}'."
    fi
    exit 0;
    ;;



  * )
    cecho 'redbold' "Error : '${1}' is not a valid action." >&2
    usage 1
    ;;
esac

exit 0
